#!/usr/bin/env perl
use strict;
use warnings;
use Data::Dump qw(ddx);

use FindBin 1.51 qw($RealBin);
=pod
http://perl5.git.perl.org/perl.git/commitdiff/ce6c0f31778913bcbf7ccd245ab390dddd8a1361
-$VERSION = "1.50";
+$VERSION = "1.51";
Thu, 19 May 2011 04:35:43 +0000 (21:35 -0700)
The FindBin documentation states as a known bug that it will return a wrong result if a script of the same name as the current one exists in
$PATH, and is executable.
Further "discussion": http://www.perlmonks.org/?node_id=41213
use Cwd 'abs_path';
my $scriptpath = abs_path($0); # ended with filename
=cut
FindBin::again(); # or FindBin->again; # Require $VERSION = "1.44"; http://perl5.git.perl.org/perl.git/commitdiff/f509412828fa95d62b8d41774f816a14ba046cac
use lib "$RealBin/lib";
#print join("\n",$FindBin::Bin,$FindBin::Script,$FindBin::RealBin,$FindBin::RealScript,$0),"\n";

use BSuitLib;
use Galaxy::IO::INI;

my %Cmd2Fun = (
	'prepare' => \&do_pre,
	'aln' => \&do_aln,
	'grep' => \&do_grep,
);

sub ShowHelp() {
	die '[!]Available Commands are: [',join('],[',sort keys %Cmd2Fun),"], case insensitive.\n";
}
my $ShowHelp=0;
if (@ARGV < 2) {
	warn "Usage: $0 <command> <config_file>\n";
	ShowHelp();
}
my $cmd=lc shift;
my $cfgfile=shift;
die "[!]Config File [$cfgfile] NOT found !\n" unless -f $cfgfile;

unless (exists $Cmd2Fun{$cmd}) {
	warn "[x]Unknown Command: [$cmd] !\n";
	ShowHelp();
}

our $Config = Galaxy::IO::INI->new();
$Config->read($cfgfile);
#ddx \$Config;

warn "[!]Runing $0 [$cmd].\n";

our $RootPath = $Config->{'Output'}->{'WorkDir'};
$RootPath =~ s/[\/\\]+$//g;
our $ProjectID = $Config->{'Output'}->{'ProjectID'};
warn "[!] Working on: [$ProjectID] @ [$RootPath]\n";
our $RefConfig = Galaxy::IO::INI->new();
if ($cmd ne 'prepare') {
	if ( -f "$RootPath/Ref/Ref.ini" ) {
		$RefConfig->read("$RootPath/Ref/Ref.ini");
	} else {die "[x] Prepare INI not found ! [$RootPath/Ref/Ref.ini]\n";}
}
our $HostRefName = basename($Config->{'RefFiles'}->{'HostRef'});
our $VirusRefName = basename($Config->{'RefFiles'}->{'VirusRef'});
our $RefFilesSHA = getFilesHash($HostRefName,$VirusRefName);

$Cmd2Fun{$cmd}();	# If use `do $Cmd2Fun{$cmd}();`, the sub MUST return 1;
warn "[!]done !\n";

# overlap = (min(end_mate1,end_mate2) - max(start_mate1,start_mate2)) http://sourceforge.net/p/bio-bwa/mailman/message/27028596/
