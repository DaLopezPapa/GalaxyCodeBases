!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
ALIGN_16	TypeNLimit.h	54;"	d
ALIGN_16	TypeNLimit.h	65;"	d
ALIGN_32	TypeNLimit.h	55;"	d
ALIGN_32	TypeNLimit.h	66;"	d
ALIGN_64	TypeNLimit.h	56;"	d
ALIGN_64	TypeNLimit.h	67;"	d
ALIGN_BIT	HSP.h	83;"	d
ALIGN_DELETE	HSP.h	80;"	d
ALIGN_INSERT	HSP.h	79;"	d
ALIGN_MATCH	HSP.h	77;"	d
ALIGN_MISMATCH_AMBIGUITY	HSP.h	78;"	d
ALIGN_PER_WORD	HSP.h	82;"	d
ALL_BITS	r250.c	23;"	d	file:
ALL_BUT_FIRST_BIT_MASK	TypeNLimit.h	37;"	d
ALL_ONE_MASK	TypeNLimit.h	38;"	d
ALNSEQ	soapio.h	/^}ALNSEQ;$/;"	t	typeref:struct:_ALNSEQ_TYPE_
ALN_DEL	Match.h	66;"	d
ALN_INS	Match.h	65;"	d
ALN_MAT	Match.h	63;"	d
ALN_MIS	Match.h	64;"	d
ALPHABET_SIZE	HSP.h	32;"	d
AUTHOR	soap.c	/^const char *AUTHOR  = "BGI shenzhen";$/;"	v
AUX_TEXT_BIT	HSP.h	86;"	d
AUX_TEXT_PER_WORD	HSP.h	85;"	d
AlignmentMemorySize	soap.c	/^int AlignmentMemorySize = 536870912;$/;"	v
AlnAln	stdaln.h	/^} AlnAln;$/;"	t	typeref:struct:__anon6
AlnParam	stdaln.h	/^} AlnParam;$/;"	t	typeref:struct:__anon4
Annotation	HSP.h	/^typedef struct Annotation {$/;"	s
Annotation	HSP.h	/^} Annotation;$/;"	t	typeref:struct:Annotation
AnnotationFileName	soap.c	/^char AnnotationFileName[MAX_FILENAME_LEN+MAX_SUFFIX_LEN]       = "";$/;"	v
AnnotationSuffix	soap.c	/^char AnnotationSuffix[MAX_SUFFIX_LEN]                          = ".ann";$/;"	v
BITS	r250.c	26;"	d	file:
BITS_IN_4_WORD	TypeNLimit.h	33;"	d
BITS_IN_4_WORD_MINUS_1	TypeNLimit.h	34;"	d
BITS_IN_4_WORD_SHIFT	TypeNLimit.h	35;"	d
BITS_IN_BYTE	TypeNLimit.h	40;"	d
BITS_IN_BYTE_SHIFT	TypeNLimit.h	41;"	d
BITS_IN_HALF_WORD	TypeNLimit.h	32;"	d
BITS_IN_WORD	TypeNLimit.h	28;"	d
BITS_IN_WORD_MASK	TypeNLimit.h	30;"	d
BITS_IN_WORD_MINUS_1	TypeNLimit.h	29;"	d
BITS_IN_WORD_SHIFT	TypeNLimit.h	31;"	d
BITS_PER_OCC_VALUE	BWT.h	38;"	d
BIT_PER_CHAR	HSP.h	33;"	d
BUCKET_BIT	BWT.h	48;"	d
BUF_PER_LINE	soapio.c	21;"	d	file:
BUF_SIZE	soapio.c	20;"	d	file:
BWT	BWT.h	/^typedef struct BWT {$/;"	s
BWT	BWT.h	/^} BWT;$/;"	t	typeref:struct:BWT
BWT1ErrorMatching	BWTAln.c	/^int BWT1ErrorMatching(const unsigned char * convertedKey, const BWTOPT *bo, const int chain, BWT *bwt, BWT *rev_bwt, LOOKUPTABLE *lookup, LOOKUPTABLE *rev_lookup, HITTABLE *hits) {$/;"	f
BWT2ErrorMatching	BWTAln.c	/^int BWT2ErrorMatching(const unsigned char *convertedKey, const BWTOPT *bo, const int chain, BWT * bwt, BWT * rev_bwt, LOOKUPTABLE *lookup, LOOKUPTABLE *rev_lookup, HITTABLE *hits) {$/;"	f
BWTAllOccValue	BWT.c	/^void BWTAllOccValue(const BWT *bwt, unsigned int index, unsigned int* __restrict occValue) {$/;"	f
BWTAllOccValueExplicit	BWT.c	/^static INLINE void BWTAllOccValueExplicit(const BWT *bwt, const unsigned int occIndexExplicit, unsigned int* __restrict occValueExplicit) {$/;"	f	file:
BWTAllOccValueTwoIndex	BWT.c	/^void BWTAllOccValueTwoIndex(const BWT *bwt, unsigned int index1, unsigned int index2, unsigned int* __restrict occValue1, unsigned int* __restrict occValue2) {$/;"	f
BWTBackward1Error	BWTAln.c	/^unsigned int BWTBackward1Error(const unsigned char *querypattern, const BWTOPT *bo, BWT *bwt, unsigned int start, unsigned int len, unsigned int pl, unsigned int pr, unsigned int info, HITTABLE *hits) {$/;"	f
BWTClearTrailingBwtCode	BWT.c	/^void BWTClearTrailingBwtCode(BWT *bwt) {$/;"	f
BWTCodeFileName	soap.c	/^char BWTCodeFileName[MAX_FILENAME_LEN+MAX_SUFFIX_LEN]          = "";$/;"	v
BWTCodeSuffix	soap.c	/^char BWTCodeSuffix[MAX_SUFFIX_LEN]                             = ".bwt";$/;"	v
BWTContBackwardSearch	BWTAln.c	/^unsigned int BWTContBackwardSearch(const unsigned char *convertedkey, const unsigned int start, const unsigned int len, const BWT *bwt, unsigned int *sal, unsigned int *sar) {$/;"	f
BWTCreate	BWT.c	/^BWT *BWTCreate(MMPool *mmPool, const unsigned int textLength, unsigned int *decodeTable) {$/;"	f
BWTDPStatistics	BWT.h	/^typedef struct BWTDPStatistics {$/;"	s
BWTDPStatistics	BWT.h	/^} BWTDPStatistics;$/;"	t	typeref:struct:BWTDPStatistics
BWTDP_MAX_SUBSTRING_LENGTH	BWT.h	54;"	d
BWTDecode	BWT.c	/^unsigned int BWTDecode(const BWT *bwt, const unsigned int index1, const unsigned int index2, const unsigned int character) {$/;"	f
BWTDecodeAll	BWT.c	/^void BWTDecodeAll(const BWT *bwt, const unsigned int index1, const unsigned int index2, unsigned int* __restrict occValue) {$/;"	f
BWTExactMatching	BWTAln.c	/^int BWTExactMatching(const unsigned char *convertedKey, const BWTOPT *bo, int chain, BWT *bwt, LOOKUPTABLE *lookup, HITTABLE *hits){$/;"	f
BWTFileSizeInWord	BWT.c	/^unsigned int BWTFileSizeInWord(const unsigned int numChar) {$/;"	f
BWTForwardSearch	BWT.c	/^int BWTForwardSearch(const unsigned int *packedKey, const unsigned int keyLength, const BWT *bwt, const unsigned int *packedText) {$/;"	f
BWTFree	BWT.c	/^void BWTFree(MMPool *mmPool, BWT *bwt) {$/;"	f
BWTGapMatching	BWTAln.c	/^ int BWTGapMatching(const unsigned char *convertedKey, const BWTOPT *bo, const int strain, BWT *bwt, BWT *rev_bwt, LOOKUPTABLE *lookup, LOOKUPTABLE *rev_lookup, HITTABLE *hits){$/;"	f
BWTGenerateSaValueOnBoundary	BWT.c	/^void BWTGenerateSaValueOnBoundary(MMPool *mmPool, BWT *bwt) {$/;"	f
BWTGetWordPackedText	BWT.c	/^static INLINE unsigned int BWTGetWordPackedText(const unsigned int *packedText, const unsigned int index, const unsigned int shift, const unsigned int numOfBit) {$/;"	f	file:
BWTInverseSa	BWT.c	/^unsigned int BWTInverseSa(const BWT *bwt, unsigned int saValue) {$/;"	f
BWTLoad	BWT.c	/^BWT *BWTLoad(MMPool *mmPool, const char *bwtCodeFileName, const char *occValueFileName, $/;"	f
BWTOPT	BWT.h	/^}BWTOPT;$/;"	t	typeref:struct:_BWTOPT_TYPE_
BWTOccValue	BWT.c	/^unsigned int BWTOccValue(const BWT *bwt, unsigned int index, const unsigned int character) {$/;"	f
BWTOccValueExplicit	BWT.c	/^static INLINE unsigned int BWTOccValueExplicit(const BWT *bwt, const unsigned int occIndexExplicit, const unsigned int character) {$/;"	f	file:
BWTOccValueFileName	soap.c	/^char BWTOccValueFileName[MAX_FILENAME_LEN+MAX_SUFFIX_LEN]      = "";$/;"	v
BWTOccValueMajorSizeInWord	BWT.c	/^unsigned int BWTOccValueMajorSizeInWord(const unsigned int numChar) {$/;"	f
BWTOccValueMinorSizeInWord	BWT.c	/^unsigned int BWTOccValueMinorSizeInWord(const unsigned int numChar) {$/;"	f
BWTOccValueOnSpot	BWT.c	/^unsigned int BWTOccValueOnSpot(const BWT *bwt, unsigned int index, unsigned int* __restrict character) {$/;"	f
BWTOccValueSuffix	soap.c	/^char BWTOccValueSuffix[MAX_SUFFIX_LEN]                         = ".fmv";$/;"	v
BWTOccValueTwoIndex	BWT.c	/^void BWTOccValueTwoIndex(const BWT *bwt, unsigned int index1, unsigned int index2, const unsigned int character, unsigned int* __restrict occValue) {$/;"	f
BWTPrefetchBWT	BWT.c	/^static INLINE void BWTPrefetchBWT(const BWT *bwt, const unsigned int index) {$/;"	f	file:
BWTPrefetchOccValueExplicit	BWT.c	/^static INLINE void BWTPrefetchOccValueExplicit(const BWT *bwt, const unsigned int occIndexExplicit) {$/;"	f	file:
BWTPsiMinusValue	BWT.c	/^unsigned int BWTPsiMinusValue(const BWT *bwt, const unsigned int index) {$/;"	f
BWTPsiPlusValue	BWT.c	/^unsigned int BWTPsiPlusValue(const BWT *bwt, const unsigned int index) {$/;"	f
BWTResidentSizeInWord	BWT.c	/^unsigned int BWTResidentSizeInWord(const unsigned int numChar) {$/;"	f
BWTSaIndexToChar	BWT.c	/^static INLINE unsigned int BWTSaIndexToChar(const BWT *bwt, const unsigned int saIndex) {$/;"	f	file:
BWTSaRetrievalStatistics	BWT.h	/^typedef struct BWTSaRetrievalStatistics {$/;"	s
BWTSaRetrievalStatistics	BWT.h	/^} BWTSaRetrievalStatistics;$/;"	t	typeref:struct:BWTSaRetrievalStatistics
BWTSaValue	BWT.c	/^unsigned int BWTSaValue(const BWT *bwt, unsigned int saIndex) {$/;"	f
BWTSearchOccValue	BWT.c	/^unsigned int BWTSearchOccValue(const BWT *bwt, const unsigned int character, const unsigned int searchOccValue) {$/;"	f
BYTES_IN_WORD	TypeNLimit.h	42;"	d
Backward1OccCount	DNACount.c	/^unsigned int Backward1OccCount(const unsigned int*  bitVector, const unsigned int index, const unsigned int*  dnaDecodeTable) {$/;"	f
BackwardAllOccCount	DNACount.c	/^void BackwardAllOccCount(const unsigned int*  packed, const unsigned int index, const unsigned int alphabetSize, unsigned int*  occCount) {$/;"	f
BackwardDNAAllOccCount	DNACount.c	/^void BackwardDNAAllOccCount(const unsigned int*  dna, const unsigned int index, unsigned int* __restrict occCount, const unsigned int*  dnaDecodeTable) {$/;"	f
BackwardDNAAllOccCountNoLimit	DNACount.c	/^void BackwardDNAAllOccCountNoLimit(const unsigned int*  dna, const unsigned int index, unsigned int* __restrict occCount, const unsigned int*  dnaDecodeTable) {$/;"	f
BackwardDNAOccCount	DNACount.c	/^unsigned int BackwardDNAOccCount(const unsigned int*  dna, const unsigned int index, const unsigned int character, const unsigned int*  dnaDecodeTable) {$/;"	f
BackwardDNAOccCountNoLimit	DNACount.c	/^unsigned int BackwardDNAOccCountNoLimit(const unsigned int*  dna, const unsigned int index, const unsigned int character, const unsigned int*  dnaDecodeTable) {$/;"	f
BackwardDNA_NAllOccCount	DNACount.c	/^void BackwardDNA_NAllOccCount(const unsigned int*  dna, const unsigned int index, unsigned int* __restrict occCount, const unsigned int*  dnaDecodeTable) {$/;"	f
BackwardDNA_NAllOccCountNoLimit	DNACount.c	/^void BackwardDNA_NAllOccCountNoLimit(const unsigned int*  dna, const unsigned int index, unsigned int* __restrict occCount, const unsigned int*  dnaDecodeTable) {$/;"	f
BackwardDNA_NOccCount	DNACount.c	/^unsigned int BackwardDNA_NOccCount(const unsigned int*  dna, const unsigned int index, const unsigned int character, const unsigned int*  dnaDecodeTable) {$/;"	f
BackwardDNA_NOccCountNoLimit	DNACount.c	/^unsigned int BackwardDNA_NOccCountNoLimit(const unsigned int*  dna, const unsigned int index, const unsigned int character, const unsigned int*  dnaDecodeTable) {$/;"	f
BackwardOccCount	DNACount.c	/^unsigned int BackwardOccCount(const unsigned int*  packed, const unsigned int index, const unsigned int character, const unsigned int alphabetSize) {$/;"	f
BitPerBytePackedChar	TextConverter.c	/^unsigned int BitPerBytePackedChar(const unsigned int alphabetSize) {$/;"	f
BitPerWordPackedChar	TextConverter.c	/^unsigned int BitPerWordPackedChar(const unsigned int alphabetSize) {$/;"	f
BytePackedLengthFromText	TextConverter.c	/^unsigned int BytePackedLengthFromText(unsigned int textLength, unsigned int bitPerChar) {$/;"	f
CHAR_MAP_SIZE	TextConverter.h	32;"	d
CHAR_PER_128	HSP.h	34;"	d
CHAR_PER_BYTE	HSP.h	36;"	d
CHAR_PER_WORD	HSP.h	35;"	d
CHRANN	ModifyAnn.c	/^}CHRANN;$/;"	t	typeref:struct:_CHRANN_TYPE	file:
CONTACT	soap.c	/^const char *CONTACT = "soap@genomics.org.cn";$/;"	v
CalMismatch	extratools.c	/^inline int CalMismatch(const char *seq, const unsigned int *ref, const unsigned int occPosCord, const unsigned int seqLen, const unsigned int dnaLength){$/;"	f
CheckFast	SeqIO.c	/^int CheckFast (int fd) {$/;"	f
CheckIns	PairMatch.c	/^inline int CheckIns(HITITEM *p, HITITEM *q, PEAUX *o) {$/;"	f
ChrBlock	HSP.h	/^}ChrBlock;$/;"	t	typeref:struct:_ChrBlock
ConvertBytePackedDNAToWordPacked	MiscUtilities.c	/^void ConvertBytePackedDNAToWordPacked(const unsigned char *input, unsigned int *output, const unsigned int textLength) {$/;"	f
ConvertBytePackedToCode	TextConverter.c	/^void ConvertBytePackedToCode(const unsigned char *input, unsigned char *output, const unsigned int alphabetSize, const unsigned int textLength) {$/;"	f
ConvertBytePackedToText	TextConverter.c	/^void ConvertBytePackedToText(const unsigned char *input, unsigned char *output, const unsigned char *reverseCharMap, const unsigned int alphabetSize, const unsigned int textLength) {$/;"	f
ConvertBytePackedToWordPacked	TextConverter.c	/^void ConvertBytePackedToWordPacked(const unsigned char *input, unsigned int *output, const unsigned int alphabetSize, const unsigned int textLength) {$/;"	f
ConvertCodeToText	TextConverter.c	/^void ConvertCodeToText(const unsigned char *input, unsigned char *output, const unsigned char *reverseCharMap, const unsigned int textLength) {$/;"	f
ConvertTextToBytePacked	TextConverter.c	/^void ConvertTextToBytePacked(const unsigned char *input, unsigned char *output, const unsigned char *charMap, const unsigned int alphabetSize, const unsigned int textLength) {$/;"	f
ConvertTextToCode	TextConverter.c	/^void ConvertTextToCode(const unsigned char *input, unsigned char *output, const unsigned char *charMap, const unsigned int textLength) {$/;"	f
ConvertTextToWordPacked	TextConverter.c	/^void ConvertTextToWordPacked(const unsigned char *input, unsigned int *output, const unsigned char *charMap, const unsigned int alphabetSize, const unsigned int textLength) {$/;"	f
ConvertWordPackedToBytePacked	TextConverter.c	/^void ConvertWordPackedToBytePacked(const unsigned int *input, unsigned char *output, const unsigned int alphabetSize, const unsigned int textLength) {$/;"	f
ConvertWordPackedToText	TextConverter.c	/^void ConvertWordPackedToText(const unsigned int *input, unsigned char *output, const unsigned char *reverseCharMap, const unsigned int alphabetSize, const unsigned int textLength) {$/;"	f
D	stdaln.c	/^	int M, I, D;$/;"	m	struct:__anon2	file:
DNAFreePacked	TextConverter.c	/^void DNAFreePacked(void* packedDNA, const unsigned int textLength) {$/;"	f
DNALoadPacked	TextConverter.c	/^void *DNALoadPacked(const char *inputFileName, unsigned int *textLength, const unsigned int convertToWordPacked) {$/;"	f
DNA_ALPHABET_SIZE	DNACount.h	32;"	d
DNA_BIT_PER_CHAR	DNACount.h	34;"	d
DNA_CHAR_PER_WORD	DNACount.h	33;"	d
DNA_N_ALPHABET_SIZE	DNACount.h	41;"	d
DNA_N_BIT_PER_CHAR	DNACount.h	43;"	d
DNA_N_CHAR_PER_WORD	DNACount.h	42;"	d
DNA_N_OCC_CNT_TABLE_SIZE_IN_WORD	DNACount.h	46;"	d
DNA_OCC_CNT_TABLE_SIZE_IN_WORD	DNACount.h	37;"	d
DNA_OCC_SUM_EXCEPTION	DNACount.h	38;"	d
DPScanDepth	BWT.h	/^typedef struct DPScanDepth {$/;"	s
DPScanDepth	BWT.h	/^} DPScanDepth;$/;"	t	typeref:struct:DPScanDepth
DPText	BWT.h	/^typedef struct DPText {$/;"	s
DPText	BWT.h	/^} DPText;$/;"	t	typeref:struct:DPText
Dt	stdaln.c	/^	unsigned char Mt:3, It:2, Dt:2;$/;"	m	struct:__anon1	file:
DumpAln	soapio.c	/^void DumpAln(MULTISEQ *mseqs, OUTAUX *o, OutFileList *ofp,unsigned int *nAln, unsigned int *nSE){$/;"	f
DupSaIndexGroup	BWT.h	/^typedef struct DupSaIndexGroup {	\/\/ Alternative usage of SaIndexGroup - the group duplicates another group$/;"	s
DupSaIndexGroup	BWT.h	/^} DupSaIndexGroup;$/;"	t	typeref:struct:DupSaIndexGroup
Dust	MiscUtilities.c	/^void Dust(const unsigned int patternLength, unsigned char *pattern, const unsigned int cutoff, const unsigned int window, const unsigned int word) {$/;"	f
DustWo	MiscUtilities.c	/^static int DustWo(const int len, const unsigned char *s, int *beg, int *end, const int wo) {$/;"	f	file:
DustWo1	MiscUtilities.c	/^static void DustWo1(const int len, const unsigned char *s, const int ivv, const int wo, int *mv, int *iv, int *jv) {$/;"	f	file:
EQUAL_KEY_THRESHOLD	MiscUtilities.c	274;"	d	file:
FALSE	TypeNLimit.h	45;"	d
FASTA	SeqIO.h	29;"	d
FASTQ	SeqIO.h	30;"	d
FILEDS	Match.h	/^}FILEDS;$/;"	t	typeref:struct:_FILEDS_
FIRST_BIT_MASK	TypeNLimit.h	36;"	d
FORWARD	Match.h	61;"	d
FOUR_MULTIPLE_MASK	TypeNLimit.h	39;"	d
FR	Match.h	/^	int FR;$/;"	m	struct:_PEAUX_TYPE_
FR	Match.h	/^	int min_ins, max_ins, FR;$/;"	m	struct:_SOAPOPT_
FREEALIGN	TypeNLimit.h	58;"	d
FREEALIGN	TypeNLimit.h	69;"	d
FROM_D	stdaln.h	66;"	d
FROM_I	stdaln.h	65;"	d
FROM_M	stdaln.h	64;"	d
FileNameIni	soap.c	/^void FileNameIni(){$/;"	f
FileTest	soap.c	/^void FileTest(FILEDS *fds){$/;"	f
Forward1OccCount	DNACount.c	/^unsigned int Forward1OccCount(const unsigned int*  bitVector, const unsigned int index, const unsigned int*  dnaDecodeTable) {$/;"	f
ForwardAllOccCount	DNACount.c	/^void ForwardAllOccCount(const unsigned int*  packed, const unsigned int index, const unsigned int alphabetSize, unsigned int*  occCount) {$/;"	f
ForwardDNAAllOccCount	DNACount.c	/^void ForwardDNAAllOccCount(const unsigned int*  dna, const unsigned int index, unsigned int*  __restrict occCount, const unsigned int*  dnaDecodeTable) {$/;"	f
ForwardDNAAllOccCountNoLimit	DNACount.c	/^void ForwardDNAAllOccCountNoLimit(const unsigned int*  dna, const unsigned int index, unsigned int* __restrict occCount, const unsigned int*  dnaDecodeTable) {$/;"	f
ForwardDNAOccCount	DNACount.c	/^unsigned int ForwardDNAOccCount(const unsigned int*  dna, const unsigned int index, const unsigned int character, const unsigned int*  dnaDecodeTable) {$/;"	f
ForwardDNAOccCountNoLimit	DNACount.c	/^unsigned int ForwardDNAOccCountNoLimit(const unsigned int*  dna, const unsigned int index, const unsigned int character, const unsigned int*  dnaDecodeTable) {$/;"	f
ForwardDNA_NAllOccCount	DNACount.c	/^void ForwardDNA_NAllOccCount(const unsigned int*  dna, const unsigned int index, unsigned int* __restrict occCount, const unsigned int*  dnaDecodeTable) {$/;"	f
ForwardDNA_NAllOccCountNoLimit	DNACount.c	/^void ForwardDNA_NAllOccCountNoLimit(const unsigned int*  dna, const unsigned int index, unsigned int* __restrict occCount, const unsigned int*  dnaDecodeTable) {$/;"	f
ForwardDNA_NOccCount	DNACount.c	/^unsigned int ForwardDNA_NOccCount(const unsigned int*  dna, const unsigned int index, const unsigned int character, const unsigned int*  dnaDecodeTable) {$/;"	f
ForwardDNA_NOccCountNoLimit	DNACount.c	/^unsigned int ForwardDNA_NOccCountNoLimit(const unsigned int*  dna, const unsigned int index, const unsigned int character, const unsigned int*  dnaDecodeTable) {$/;"	f
ForwardOccCount	DNACount.c	/^unsigned int ForwardOccCount(const unsigned int*  packed, const unsigned int index, const unsigned int character, const unsigned int alphabetSize) {$/;"	f
FreeHashTable	extratools.c	/^void FreeHashTable(HASHTABLE * hashTable) {$/;"	f
FreeLookupTable	extratools.c	/^void FreeLookupTable(LOOKUPTABLE * lookupTable) {$/;"	f
FreeMultiSeq	soapio.c	/^void FreeMultiSeq(MULTISEQ *mseqs){$/;"	f
GenCigarMD	Match.c	19;"	d	file:
GenMultiReads	soapio.c	/^int GenMultiReads(const HSP *hsp, MULTISEQ *mseqs, const int len, const int pe, unsigned int *start, int *nb){$/;"	f
GenOCCArr	extratools.h	87;"	d
GenPair	PairMatch.c	/^int GenPair(HITTABLE **hitse, PEAUX *po,  HITTABLE **hitpe) {$/;"	f
GenerateDNAOccCountTable	DNACount.c	/^void GenerateDNAOccCountTable(unsigned int *dnaDecodeTable) {$/;"	f
GenerateDNA_NOccCountTable	DNACount.c	/^void GenerateDNA_NOccCountTable(unsigned int *dnaDecodeTable) {$/;"	f
GenerateReverseCharMap	TextConverter.c	/^void GenerateReverseCharMap(const unsigned char *charMap, unsigned char *reverseCharMap) {$/;"	f
GetMultiSeq	soapio.c	/^int GetMultiSeq (InFileList *ifp, MULTISEQ *mseqs, const int pe, int(*get_read)(FILE *, seq_t * , const int)){$/;"	f
GetWordPackedText	TextConverter.c	/^unsigned int GetWordPackedText(const unsigned int *packedText, const unsigned int index, const unsigned int shift, const unsigned int numberOfBit, const unsigned int vacantBit) {$/;"	f
H0	soapio.h	/^		int H0;$/;"	m	struct:_ALNSEQ_TYPE_::__anon3
H1	soapio.h	/^		int H1;$/;"	m	struct:_ALNSEQ_TYPE_::__anon3
H2	soapio.h	/^		int H2;$/;"	m	struct:_ALNSEQ_TYPE_::__anon3
HALF_RANGE	r250.c	24;"	d	file:
HASHCELL	extratools.h	/^}HASHCELL;$/;"	t	typeref:struct:HASHCELL_TYPE
HASHCELL_TYPE	extratools.h	/^typedef struct HASHCELL_TYPE {$/;"	s
HASHITEM	extratools.h	/^}HASHITEM;$/;"	t	typeref:struct:HASHITEM_TYPE
HASHITEM_TYPE	extratools.h	/^typedef struct HASHITEM_TYPE {$/;"	s
HASHTABLE	extratools.h	/^}HASHTABLE;$/;"	t	typeref:struct:HASHTABLE_TYPE
HASHTABLE_TYPE	extratools.h	/^typedef struct HASHTABLE_TYPE {$/;"	s
HITCMP	PairMatch.c	/^int HITCMP(const void *a, const void *b){$/;"	f
HITCPY	Match.h	69;"	d
HITITEM	extratools.h	/^}HITITEM;$/;"	t	typeref:struct:_HITITEM_TYPE_
HITTABLE	extratools.h	/^}HITTABLE;$/;"	t	typeref:struct:_HITTABLE_TYPE_
HSP	HSP.h	/^typedef struct HSP {$/;"	s
HSP	HSP.h	/^}HSP;$/;"	t	typeref:struct:HSP
HSPFillCharMap	HSP.c	/^void HSPFillCharMap(unsigned char charMap[255]) {$/;"	f
HSPFillComplementMap	HSP.c	/^void HSPFillComplementMap(unsigned char complementMap[255]) {$/;"	f
HSPFree	HSP.c	/^void HSPFree(MMPool *mmPool, HSP *hsp) {$/;"	f
HSPLoad	HSP.c	/^HSP *HSPLoad (MMPool *mmPool, const char *PackedDNAFileName, const char *AnnotationFileName) {$/;"	f
HSPParseFASTAToPacked	HSP.c	/^unsigned int HSPParseFASTAToPacked(const char* FASTAFileName, const char* annotationFileName, const char* packedDNAFileName, const char* ambiguityFileName, const unsigned int FASTARandomSeed, const int maskLowerCase) {$/;"	f
Hash	extratools.c	/^unsigned int Hash(HASHTABLE * hashTable, unsigned int key) {$/;"	f
HashFind	extratools.c	/^HASHITEM * HashFind(HASHTABLE * hashTable, unsigned int l,unsigned int r) {$/;"	f
HighOccHashTableFileName	soap.c	/^char HighOccHashTableFileName[MAX_FILENAME_LEN+MAX_SUFFIX_LEN] = "";$/;"	v
HighOccHashTableSuffix	soap.c	/^char HighOccHashTableSuffix[MAX_SUFFIX_LEN]                    = ".hot";$/;"	v
HitCombination	BWT.h	/^typedef struct HitCombination {$/;"	s
HitCombination	BWT.h	/^} HitCombination;$/;"	t	typeref:struct:HitCombination
HitInc	extratools.h	142;"	d
I	stdaln.c	/^	int M, I, D;$/;"	m	struct:__anon2	file:
INITALN	Match.c	310;"	d	file:
INLINE	TypeNLimit.h	53;"	d
INLINE	TypeNLimit.h	64;"	d
INVALID_CHAR	TextConverter.h	31;"	d
INVALID_CHAR_INDEX	HSP.h	75;"	d
InFileList	soapio.h	/^}InFileList;$/;"	t	typeref:struct:_INFILELIST_
InitialLoadPackedIncFromEnd	TextConverter.c	/^FILE *InitialLoadPackedIncFromEnd(const char* inputFileName, unsigned char *packedOutput, const unsigned int alphabetSize, $/;"	f
InitialLoadTextIncFromEnd	TextConverter.c	/^FILE *InitialLoadTextIncFromEnd(const char* inputFileName, unsigned char *textOutput, const unsigned int textLengthPerLoad, unsigned int *textLength, unsigned int *textLengthForThisLoad) {$/;"	f
It	stdaln.c	/^	unsigned char Mt:3, It:2, Dt:2;$/;"	m	struct:__anon1	file:
KSTRING_H	kstring.h	2;"	d
KSTRING_T	kstring.h	12;"	d
LH3_STDALN_H_	stdaln.h	51;"	d
LOCAL_OVERFLOW_REDUCE	stdaln.c	252;"	d	file:
LOCAL_OVERFLOW_THRESHOLD	stdaln.c	251;"	d	file:
LONG	TypeNLimit.h	74;"	d
LOOKUPTABLE	extratools.h	/^}LOOKUPTABLE;$/;"	t	typeref:struct:LOOKUPTABLE_TYPE
LOOKUPTABLE_TYPE	extratools.h	/^typedef struct LOOKUPTABLE_TYPE {$/;"	s
LastByteLength	TextConverter.c	/^unsigned char LastByteLength(unsigned int textLength, unsigned int bitPerChar) {$/;"	f
LastWordLength	TextConverter.c	/^unsigned int LastWordLength(unsigned int textLength, unsigned int bitPerChar) {$/;"	f
LimitCodeGenerateCodeTable	MiscUtilities.c	/^void LimitCodeGenerateCodeTable(const unsigned int limit, unsigned int** codeValue, unsigned int** codeLength) {$/;"	f
LoadHashTable	extratools.c	/^void LoadHashTable(HASHTABLE * hashTable, const char * fileName) {$/;"	f
LoadLookupTable	extratools.c	/^void LoadLookupTable(LOOKUPTABLE * lookupTable, const char * fileName, const int tableSize)  {$/;"	f
LoadPackedIncFromEnd	TextConverter.c	/^void LoadPackedIncFromEnd(FILE *packedFile, unsigned char *packedOutput, const unsigned int packedLengthPerLoad) {$/;"	f
LoadTextIncFromEnd	TextConverter.c	/^void LoadTextIncFromEnd(FILE *textFile, unsigned char *textOutput, const unsigned int textLengthPerLoad) {$/;"	f
LookUpTableSize	soap.c	/^unsigned int LookUpTableSize  = 13;$/;"	v
LookupSafe	extratools.c	/^unsigned int LookupSafe(LOOKUPTABLE lookupTable, BWT * bwt,$/;"	f
LookupTableFileName	soap.c	/^char LookupTableFileName[MAX_FILENAME_LEN+MAX_SUFFIX_LEN]      = "";$/;"	v
LookupTableSuffix	soap.c	/^char LookupTableSuffix[MAX_SUFFIX_LEN]                         = ".lkt";$/;"	v
M	stdaln.c	/^	int M, I, D;$/;"	m	struct:__anon2	file:
MAKE_TIME	soap.c	33;"	d	file:
MATCHAUX	Match.h	/^}MATCHAUX;$/;"	t	typeref:struct:_MATCHAUX_TYPE_
MAX_ALIGN	MemManager.h	32;"	d
MAX_ALIGNMENT_LENGTH	HSP.h	38;"	d
MAX_ALN	Match.h	60;"	d
MAX_APPROX_MATCH_ERROR	BWT.h	51;"	d
MAX_ARPROX_MATCH_LENGTH	BWT.h	52;"	d
MAX_DIAGONAL_LEVEL	BWT.h	98;"	d
MAX_DIFF	extratools.h	14;"	d
MAX_FILENAME_LEN	soap.c	41;"	d	file:
MAX_GAP_LEN	Match.h	57;"	d
MAX_HISTO_SIZE	HSP.h	73;"	d
MAX_MD_LEN	extratools.h	141;"	d
MAX_MISMATCH	Match.h	53;"	d
MAX_MULTI_READS	soapio.h	23;"	d
MAX_NAME_LEN	SeqIO.h	27;"	d
MAX_PTHREADS	soap.c	248;"	d	file:
MAX_SEQ_LEN	Match.h	59;"	d
MAX_SEQ_NAME_LENGTH	HSP.h	71;"	d
MAX_SEQ_NAME_LENGTH	TextConverter.h	35;"	d
MAX_SUFFIX_LEN	soap.c	42;"	d	file:
MEMALIGN	TypeNLimit.h	57;"	d
MEMALIGN	TypeNLimit.h	68;"	d
MINOR_INF	stdaln.h	69;"	d
MIN_ALIGN	MemManager.h	33;"	d
MMBulk	MemManager.h	/^typedef struct MMBulk {$/;"	s
MMBulk	MemManager.h	/^} MMBulk;$/;"	t	typeref:struct:MMBulk
MMBulkAddress	MemManager.c	/^void *MMBulkAddress(const MMBulk *mmBulk, const unsigned int index) {$/;"	f
MMBulkByteAllocated	MemManager.c	/^unsigned int MMBulkByteAllocated(const MMBulk *mmBulk) {$/;"	f
MMBulkByteDispatched	MemManager.c	/^unsigned int MMBulkByteDispatched(const MMBulk *mmBulk) {$/;"	f
MMBulkCreate	MemManager.c	/^MMBulk *MMBulkCreate(MMPool *mmPool, const unsigned int itemSize, const unsigned int itemPerAllocationInPowerOf2, $/;"	f
MMBulkDestory	MemManager.c	/^void MMBulkDestory(MMBulk *mmBulk) {$/;"	f
MMBulkDispatch	MemManager.c	/^unsigned int MMBulkDispatch(MMBulk *mmBulk) {$/;"	f
MMBulkFindPoolUsed	MemManager.c	/^MMPool *MMBulkFindPoolUsed(const MMBulk *mmBulk) {$/;"	f
MMBulkFree	MemManager.c	/^void MMBulkFree(MMBulk *mmBulk) {$/;"	f
MMBulkIsActive	MemManager.c	/^unsigned int MMBulkIsActive(const MMBulk *mmBulk) {$/;"	f
MMBulkLoad	MemManager.c	/^MMBulk *MMBulkLoad(MMPool *mmPool, FILE *input) {$/;"	f
MMBulkPrintReport	MemManager.c	/^void MMBulkPrintReport(MMBulk *mmBulk, FILE *output){$/;"	f
MMBulkSave	MemManager.c	/^void MMBulkSave(MMBulk *mmBulk, FILE *output) {$/;"	f
MMBulkSetInactive	MemManager.c	/^void MMBulkSetInactive(MMBulk *mmBulk) {$/;"	f
MMBulkUnitDispatched	MemManager.c	/^unsigned int MMBulkUnitDispatched(const MMBulk *mmBulk) {$/;"	f
MMFree	MemManager.c	/^void MMFree(void *address) {$/;"	f
MMMalloc	MemManager.c	/^void *MMMalloc(const unsigned int memSize) {$/;"	f
MMMaster	MemManager.h	/^typedef struct MMMaster {$/;"	s
MMMaster	MemManager.h	/^} MMMaster;$/;"	t	typeref:struct:MMMaster
MMMasterCurrentTotalByteAllocated	MemManager.c	/^unsigned int MMMasterCurrentTotalByteAllocated() {$/;"	f
MMMasterCurrentTotalByteDispatched	MemManager.c	/^unsigned int MMMasterCurrentTotalByteDispatched() {$/;"	f
MMMasterFreeAll	MemManager.c	/^void MMMasterFreeAll() {$/;"	f
MMMasterInitialize	MemManager.c	/^void MMMasterInitialize(const unsigned int maxNumberOfPools, const unsigned int maxNumberOfBulks, $/;"	f
MMMasterMaxTotalByteAllocated	MemManager.c	/^unsigned int MMMasterMaxTotalByteAllocated() {$/;"	f
MMMasterMaxTotalByteDispatched	MemManager.c	/^unsigned int MMMasterMaxTotalByteDispatched() {$/;"	f
MMMasterPrintReport	MemManager.c	/^void MMMasterPrintReport(FILE *output, const unsigned int withUnitDetails, const unsigned int withPoolDetails, const unsigned int withBulkDetails) {$/;"	f
MMMasterSetMaxTotalByteAllocated	MemManager.c	/^void MMMasterSetMaxTotalByteAllocated() {$/;"	f
MMMasterSetMaxTotalByteDispatched	MemManager.c	/^void MMMasterSetMaxTotalByteDispatched() {$/;"	f
MMPool	MemManager.h	/^typedef struct MMPool {$/;"	s
MMPool	MemManager.h	/^} MMPool;$/;"	t	typeref:struct:MMPool
MMPoolByteAvailable	MemManager.c	/^unsigned int MMPoolByteAvailable(const MMPool *mmPool) {$/;"	f
MMPoolCreate	MemManager.c	/^MMPool *MMPoolCreate(const unsigned int poolSize) {$/;"	f
MMPoolCurrentTotalByteAllocated	MemManager.c	/^unsigned int MMPoolCurrentTotalByteAllocated(const MMPool *mmPool) {$/;"	f
MMPoolCurrentTotalByteDispatched	MemManager.c	/^unsigned int MMPoolCurrentTotalByteDispatched(const MMPool *mmPool) {$/;"	f
MMPoolDestory	MemManager.c	/^void MMPoolDestory(MMPool *mmPool) {$/;"	f
MMPoolDispatch	MemManager.c	/^void *MMPoolDispatch(MMPool *mmPool, const unsigned int memSize) {$/;"	f
MMPoolDispatchOffset	MemManager.c	/^unsigned int MMPoolDispatchOffset(MMPool *mmPool, const unsigned int memSize) {$/;"	f
MMPoolFree	MemManager.c	/^MMPool *MMPoolFree(MMPool *mmPool) {$/;"	f
MMPoolIsActive	MemManager.c	/^unsigned int MMPoolIsActive(const MMPool *mmPool) {$/;"	f
MMPoolMaxTotalByteDispatched	MemManager.c	/^unsigned int MMPoolMaxTotalByteDispatched(const MMPool *mmPool) {$/;"	f
MMPoolPrintReport	MemManager.c	/^void MMPoolPrintReport(MMPool *mmPool, FILE *output) {$/;"	f
MMPoolReset	MemManager.c	/^void MMPoolReset(MMPool *mmPool) {$/;"	f
MMPoolReturn	MemManager.c	/^void MMPoolReturn(MMPool *mmPool, void *address, const unsigned int memSize) {$/;"	f
MMPoolSetInactive	MemManager.c	/^void MMPoolSetInactive(MMPool *mmPool) {$/;"	f
MMTempDispatch	MemManager.c	/^void *MMTempDispatch(MMPool *mmPool, const unsigned int memSize) {$/;"	f
MMTempPrintReport	MemManager.c	/^void MMTempPrintReport(MMPool *mmPool, FILE *output) {$/;"	f
MMTempReturn	MemManager.c	/^void MMTempReturn(MMPool *mmPool, void *address, const unsigned int memSize) {$/;"	f
MMUnitAllocate	MemManager.c	/^void *MMUnitAllocate(const unsigned int memSize) {$/;"	f
MMUnitCurrentByteAllocated	MemManager.c	/^unsigned int MMUnitCurrentByteAllocated() {$/;"	f
MMUnitFree	MemManager.c	/^void MMUnitFree(void *address, const unsigned int memSize) {$/;"	f
MMUnitMaxByteAllocated	MemManager.c	/^unsigned int MMUnitMaxByteAllocated() {$/;"	f
MMUnitPrintReport	MemManager.c	/^void MMUnitPrintReport(FILE *output) {$/;"	f
MMUnitReallocate	MemManager.c	/^void *MMUnitReallocate(void *address, const unsigned int newMemSize, const unsigned int oldMemSize) {$/;"	f
MODE	soap.c	277;"	d	file:
MSB	r250.c	22;"	d	file:
MULTISEQ	soapio.h	/^}MULTISEQ;$/;"	t	typeref:struct:_MULTISEQ_TYPE_
MULTI_SEQ	Match.h	51;"	d
MYALLOC	stdaln.h	58;"	d
MYFREE	stdaln.h	61;"	d
MatchProcess	Match.c	/^void MatchProcess (FILEDS *fds, BWT *bwt, BWT *rev_bwt, LOOKUPTABLE *lookup, LOOKUPTABLE *rev_lookup, HSP *hsp, const SOAPOPT *opt) {$/;"	f
Mem	MemManager.h	54;"	d
Mem	MemManager.h	56;"	d
Mt	stdaln.c	/^	unsigned char Mt:3, It:2, Dt:2;$/;"	m	struct:__anon1	file:
NSEQ_PER_THREAD	Match.h	31;"	d
NT_LOCAL_MASK	stdaln.c	255;"	d	file:
NT_LOCAL_SCORE	stdaln.c	253;"	d	file:
NT_LOCAL_SHIFT	stdaln.c	254;"	d	file:
NUM_BUCKET	BWT.h	49;"	d
NewAnnotation	HSP.h	/^}NewAnnotation;$/;"	t	typeref:struct:_NewAnnotation
OCC	extratools.h	/^typedef unsigned int OCC;$/;"	t
OCCProcess	extratools.c	/^int OCCProcess(const unsigned int l,const unsigned int r, const BWTOPT *bo, const unsigned int info, HITTABLE *hits) {$/;"	f
OCCSection	extratools.c	/^unsigned int OCCSection=0;$/;"	v
OCC_INTERVAL	BWT.h	40;"	d
OCC_INTERVAL_MAJOR	BWT.h	42;"	d
OCC_VALUE_PER_WORD	BWT.h	39;"	d
OUTAUX	soapio.h	/^}OUTAUX;$/;"	t	typeref:struct:_OUTAUX_TYPE_
OptIni	soap.c	/^SOAPOPT *OptIni(){$/;"	f
OrientPacPos	extratools.h	110;"	d
OutFileList	soapio.h	/^}OutFileList;$/;"	t	typeref:struct:_OUTFILELIST_
P	BWT.h	/^	unsigned P				:	31;$/;"	m	struct:DPScanDepth
PACKED_BUFFER_SIZE	TextConverter.h	33;"	d
PACKED_BUFFER_SIZE_IN_WORD	TextConverter.h	34;"	d
PEAUX	Match.h	/^}PEAUX;$/;"	t	typeref:struct:_PEAUX_TYPE_
PEAlnCore	PairMatch.c	/^void PEAlnCore(int tid, MULTISEQ *mseqs, BWT *bwt, BWT *rev_bwt, LOOKUPTABLE *lookup, LOOKUPTABLE *rev_lookup, HSP *hsp,const SOAPOPT *opt) {$/;"	f
POSCMP	BWTAln.c	/^static inline int POSCMP(const void *a, const void *b){$/;"	f	file:
PROGRAM	soap.c	/^const char *PROGRAM = "SOAPaligner\/soap2";$/;"	v
PacReadExt	Match.h	83;"	d
PacRefToChar	PairMatch.c	100;"	d	file:
PackTextWithAllShift	TextConverter.c	/^void PackTextWithAllShift(const unsigned char *input, unsigned int **output, const unsigned char *charMap, const unsigned int alphabetSize, const unsigned int textLength) {$/;"	f
PackedDNAFileName	soap.c	/^char PackedDNAFileName[MAX_FILENAME_LEN+MAX_SUFFIX_LEN]        = "";$/;"	v
PackedDNASuffix	soap.c	/^char PackedDNASuffix[MAX_SUFFIX_LEN]                           = ".pac";$/;"	v
ParseOpt	soap.c	/^void ParseOpt(int argc, char *argv[]){$/;"	f
PickupHit	Match.c	/^inline void PickupHit(ALNSEQ *alnSeq, const int rr,int *site, HITTABLE *hits, const unsigned int *pacRef, const unsigned int dnaLength, unsigned short *cigar){$/;"	f
PoolSize	soap.c	/^int PoolSize            = 20971520;$/;"	v
QSort	MiscUtilities.c	/^void QSort(void* __restrict data, const int numData, const int dataWidth, int (*QSortComp)(const void*, const int, const int) ) {$/;"	f
QSortSwap	MiscUtilities.c	/^static void QSortSwap(void* __restrict data, const int dataWidth, const int index1, const int index2) {$/;"	f	file:
QSortUnsignedIntOrder	MiscUtilities.c	/^int QSortUnsignedIntOrder(const void *data, const int index1, const int index2) {$/;"	f
QUERY_LEN	SeqIO.h	28;"	d
RANDOM_SUBSTITUTE	TextConverter.h	36;"	d
RECORD_GRAND_TOTAL	MemManager.h	35;"	d
REVBWTContForwardSearch	BWTAln.c	/^unsigned int REVBWTContForwardSearch(const unsigned char *convertedkey, const unsigned int start, const unsigned int len, const BWT *rev_bwt, unsigned int *sal, unsigned int *sar, unsigned int *rev_sal, unsigned int *rev_sar) {$/;"	f
REVBWTForward1Error	BWTAln.c	/^unsigned int REVBWTForward1Error(const unsigned char *querypattern, const BWTOPT *bo, BWT * bwt,BWT * rev_bwt, unsigned int start,unsigned int len,unsigned int pl,unsigned int pr,unsigned int rev_pl,unsigned int rev_pr, unsigned int info, HITTABLE *hits) {$/;"	f
REVBWTForwardSearch	BWTAln.c	/^unsigned int REVBWTForwardSearch(const unsigned char *convertedkey, const unsigned int keylength, const BWT *rev_bwt, unsigned int *resultsaindexleft, unsigned int *resultsaindexright, unsigned int *rev_resultsaindexleft, unsigned int *rev_resultsaindexright) {$/;"	f
REVERSE	Match.h	62;"	d
ReadBytePackedAsWordPacked	TextConverter.c	/^unsigned int ReadBytePackedAsWordPacked(const char *inputFileName, const unsigned int alphabetSize, unsigned int *targetAddress, const unsigned int maxTextLength) {$/;"	f
ReadCharMap	TextConverter.c	/^unsigned int ReadCharMap(unsigned char *charMap, const char *inputFileName, const unsigned char defaultMapping) {$/;"	f
ReadTextAsWordPacked	TextConverter.c	/^unsigned int ReadTextAsWordPacked(const char *inputFileName, const unsigned char *charMap, const unsigned int alphabetSize, unsigned int *targetAddress, const unsigned int maxTextLength) {$/;"	f
RegisterDecoder	extratools.c	/^void RegisterDecoder(BWT * bwt,HASHTABLE * hashTable) {$/;"	f
RevBWTCodeFileName	soap.c	/^char RevBWTCodeFileName[MAX_FILENAME_LEN+MAX_SUFFIX_LEN]       = "";$/;"	v
RevBWTCodeSuffix	soap.c	/^char RevBWTCodeSuffix[MAX_SUFFIX_LEN]                          = ".rev.bwt";$/;"	v
RevBWTOccValueFileName	soap.c	/^char RevBWTOccValueFileName[MAX_FILENAME_LEN+MAX_SUFFIX_LEN]   = "";$/;"	v
RevBWTOccValueSuffix	soap.c	/^char RevBWTOccValueSuffix[MAX_SUFFIX_LEN]                      = ".rev.fmv";$/;"	v
RevLookUpTableSize	soap.c	/^unsigned int RevLookUpTableSize = 13;$/;"	v
RevLookupTableFileName	soap.c	/^char RevLookupTableFileName[MAX_FILENAME_LEN+MAX_SUFFIX_LEN]   = "";$/;"	v
RevLookupTableSuffix	soap.c	/^char RevLookupTableSuffix[MAX_SUFFIX_LEN]                      = ".rev.lkt";$/;"	v
RevPackedDNAFileName	soap.c	/^char RevPackedDNAFileName[MAX_FILENAME_LEN+MAX_SUFFIX_LEN]     = "";$/;"	v
RevPackedDNASuffix	soap.c	/^char RevPackedDNASuffix[MAX_SUFFIX_LEN]                        = ".rev.pac";$/;"	v
SEAlnCore	Match.c	/^void SEAlnCore(int tid, MULTISEQ *mseqs, BWT *bwt, BWT *rev_bwt, LOOKUPTABLE *lookup, LOOKUPTABLE *rev_lookup, HSP *hsp, const SOAPOPT *opt) {$/;"	f
SEQDUP	soapio.c	45;"	d	file:
SEQ_ALLOC	Match.h	33;"	d
SEQ_ALLOC	Match.h	48;"	d
SET_INF	stdaln.c	257;"	d	file:
SHORTEST	HSP.h	39;"	d
SMALL_ARRAY_SIZE	MiscUtilities.c	273;"	d	file:
SOAPOPT	Match.h	/^}SOAPOPT;$/;"	t	typeref:struct:_SOAPOPT_
SOAPOUT	soapio.c	162;"	d	file:
SORT_16_BIT	BWT.h	45;"	d
SORT_ALL	BWT.h	44;"	d
SORT_NONE	BWT.h	46;"	d
STDALN_VERSION	stdaln.h	54;"	d
STEP	r250.c	25;"	d	file:
SWRescue	PairMatch.c	/^unsigned short *SWRescue(const ALNSEQ *alnSeq, const BWTOPT *bo, const PEAUX *po, const int rescue, HITTABLE **hitse, HITTABLE **hitpe, int *nc){$/;"	f
SaIndexGroup	BWT.h	/^typedef struct SaIndexGroup {	\/\/ SA index range and information of a particular error arrangement of a matched sub-pattern$/;"	s
SaIndexGroup	BWT.h	/^} SaIndexGroup;$/;"	t	typeref:struct:SaIndexGroup
SaIndexGroupHash	BWT.h	/^typedef struct SaIndexGroupHash {	\/\/ Hash table for checking duplicate SA index group$/;"	s
SaIndexGroupHash	BWT.h	/^} SaIndexGroupHash;$/;"	t	typeref:struct:SaIndexGroupHash
SaIndexGroupNew	BWT.h	/^typedef struct SaIndexGroupNew {	\/\/ SA index range and information of a particular error arrangement of a matched sub-pattern$/;"	s
SaIndexGroupNew	BWT.h	/^} SaIndexGroupNew;$/;"	t	typeref:struct:SaIndexGroupNew
SaIndexGroupOld	BWT.h	/^typedef struct SaIndexGroupOld {	\/\/ SA index range and information of a particular error arrangement of a matched sub-pattern$/;"	s
SaIndexGroupOld	BWT.h	/^} SaIndexGroupOld;$/;"	t	typeref:struct:SaIndexGroupOld
SaIndexGroupProcessed	BWT.h	/^typedef struct SaIndexGroupProcessed {	\/\/ Alternative usage of SaIndexGroup - once processed, error bit vector is replaced by index to text position$/;"	s
SaIndexGroupProcessed	BWT.h	/^} SaIndexGroupProcessed;$/;"	t	typeref:struct:SaIndexGroupProcessed
SaIndexGroupWithErrorBitVector	BWT.h	/^typedef struct SaIndexGroupWithErrorBitVector {	\/\/ SA index range and information of a particular error arrangement of a matched sub-pattern$/;"	s
SaIndexGroupWithErrorBitVector	BWT.h	/^} SaIndexGroupWithErrorBitVector;$/;"	t	typeref:struct:SaIndexGroupWithErrorBitVector
SaIndexGroupWithLengthError	BWT.h	/^typedef struct SaIndexGroupWithLengthError {	\/\/ SA index range and information of a particular error arrangement of a matched sub-pattern$/;"	s
SaIndexGroupWithLengthError	BWT.h	/^} SaIndexGroupWithLengthError;$/;"	t	typeref:struct:SaIndexGroupWithLengthError
SaIndexList	BWT.h	/^typedef struct SaIndexList {$/;"	s
SaIndexList	BWT.h	/^} SaIndexList;$/;"	t	typeref:struct:SaIndexList
SaIndexRange	BWT.h	/^typedef struct SaIndexRange {$/;"	s
SaIndexRange	BWT.h	/^} SaIndexRange;$/;"	t	typeref:struct:SaIndexRange
SaValueFileName	soap.c	/^char SaValueFileName[MAX_FILENAME_LEN+MAX_SUFFIX_LEN]          = "";$/;"	v
SaValueSuffix	soap.c	/^char SaValueSuffix[MAX_SUFFIX_LEN]                             = ".sa";$/;"	v
SaveBytePacked	TextConverter.c	/^void SaveBytePacked(const char *outputFileName, const unsigned char *bytePacked, const unsigned int textLength, const unsigned int alphabetSize) {$/;"	f
SaveText	TextConverter.c	/^void SaveText(const char *outputFileName, const unsigned char *text, const unsigned int textLength) {$/;"	f
SaveWordPacked	TextConverter.c	/^void SaveWordPacked(const char *outputFileName, const unsigned int *wordPacked, const unsigned int textLength, const unsigned int alphabetSize) {$/;"	f
THREADAUX	Match.c	/^}THREADAUX;$/;"	t	typeref:struct:_THREADAUX_TYPE_	file:
TRUE	TypeNLimit.h	44;"	d
TextLengthFromBytePacked	TextConverter.c	/^unsigned int TextLengthFromBytePacked(unsigned int bytePackedLength, unsigned int bitPerChar, unsigned int lastByteLength) {$/;"	f
TextLengthFromWordPacked	TextConverter.c	/^unsigned int TextLengthFromWordPacked(unsigned int wordPackedLength, unsigned int bitPerChar, unsigned int lastWordLength) {$/;"	f
Usage	ModifyAnn.c	/^void Usage(){$/;"	f
Usage	soap.c	/^void Usage(void) {$/;"	f
VERSION	soap.c	/^const char *VERSION = VID;			\/*release date: 14\/01\/2009*\/$/;"	v
VID	soap.c	38;"	d	file:
WORD_BETWEEN_OCC	BWT.h	41;"	d
WordPackedLengthFromText	TextConverter.c	/^unsigned int WordPackedLengthFromText(unsigned int textLength, unsigned int bitPerChar) {$/;"	f
Workers	Match.c	/^static void *Workers(void *threadAux){$/;"	f	file:
WorkingMemorySize	soap.c	/^int WorkingMemorySize   = 1073741824;$/;"	v
_ALNSEQ_TYPE_	soapio.h	/^typedef struct _ALNSEQ_TYPE_{$/;"	s
_BWTALN_H__INC	BWTAln.h	20;"	d
_BWTOPT_TYPE_	BWT.h	/^typedef struct _BWTOPT_TYPE_{$/;"	s
_CHRANN_TYPE	ModifyAnn.c	/^typedef struct _CHRANN_TYPE{$/;"	s	file:
_ChrBlock	HSP.h	/^typedef struct _ChrBlock{$/;"	s
_EXTRATOOLS_H_	extratools.h	2;"	d
_FILEDS_	Match.h	/^typedef struct _FILEDS_{$/;"	s
_HITITEM_TYPE_	extratools.h	/^typedef struct _HITITEM_TYPE_{$/;"	s
_HITTABLE_TYPE_	extratools.h	/^typedef struct _HITTABLE_TYPE_{$/;"	s
_INFILELIST_	soapio.h	/^typedef struct _INFILELIST_{$/;"	s
_MATCHAUX_TYPE_	Match.h	/^typedef struct _MATCHAUX_TYPE_{$/;"	s
_MATCH_H_	Match.h	20;"	d
_MULTISEQ_TYPE_	soapio.h	/^typedef struct _MULTISEQ_TYPE_{$/;"	s
_NewAnnotation	HSP.h	/^typedef struct _NewAnnotation{$/;"	s
_OUTAUX_TYPE_	soapio.h	/^typedef struct _OUTAUX_TYPE_{$/;"	s
_OUTFILELIST_	soapio.h	/^typedef struct _OUTFILELIST_{$/;"	s
_PEAUX_TYPE_	Match.h	/^typedef struct _PEAUX_TYPE_{$/;"	s
_R250_H_	r250.h	15;"	d
_SEQ_T_	SeqIO.h	/^typedef struct _SEQ_T_{$/;"	s
_SOAPIO_H_	soapio.h	18;"	d
_SOAPOPT_	Match.h	/^typedef struct _SOAPOPT_{$/;"	s
_THREADAUX_TYPE_	Match.c	/^typedef struct _THREADAUX_TYPE_{$/;"	s	file:
__BWT_H__	BWT.h	31;"	d
__DNA_COUNT_H__	DNACount.h	27;"	d
__HSP_H__	HSP.h	26;"	d
__MEM_MANAGER_H__	MemManager.h	26;"	d
__MISC_UTILITIES_H__	MiscUtilities.h	27;"	d
__SEQIO_H__	SeqIO.h	19;"	d
__TEXTCONVERTOR_H__	TextConverter.h	26;"	d
__TIMING_H__	Timing.h	26;"	d
__TYPENLIMIT_H__	TypeNLimit.h	24;"	d
__kstring_t	kstring.h	/^typedef struct __kstring_t {$/;"	s
__soap_H__	soap.h	21;"	d
a	extratools.h	/^       unsigned int a;$/;"	m	struct:HASHTABLE_TYPE
acceptedPath	BWT.h	/^	LONG acceptedPath;$/;"	m	struct:BWTDPStatistics
acceptedPathDepth	BWT.h	/^	LONG acceptedPathDepth;$/;"	m	struct:BWTDPStatistics
allErr	Match.h	/^	int allErr;$/;"	m	struct:_MATCHAUX_TYPE_
allErr	Match.h	/^	int allErr;$/;"	m	struct:_PEAUX_TYPE_
allErr	Match.h	/^	int allErr;$/;"	m	struct:_SOAPOPT_
allErr	soapio.h	/^	int allErr;$/;"	m	struct:_OUTAUX_TYPE_
allOne	extratools.c	/^unsigned int allOne = 0;$/;"	v
alnLen	BWT.h	/^	int alnLen, seqLen;$/;"	m	struct:_BWTOPT_TYPE_
aln_aa_rev_table	stdaln.c	/^char *aln_aa_rev_table = "ARNDCQEGHILKMFPSTWYV*X-";$/;"	v
aln_aa_table	stdaln.c	/^unsigned char aln_aa_table[256] = {$/;"	v
aln_free_AlnAln	stdaln.c	/^void aln_free_AlnAln(AlnAln *aa)$/;"	f
aln_global_core	stdaln.c	/^int aln_global_core(unsigned char *seq1, int len1, unsigned char *seq2, int len2, const AlnParam *ap,$/;"	f
aln_init_AlnAln	stdaln.c	/^AlnAln *aln_init_AlnAln()$/;"	f
aln_init_score_array	stdaln.c	/^void aln_init_score_array(unsigned char *seq, int len, int row, int *score_matrix, int **s_array)$/;"	f
aln_len	Match.h	/^	int aln_len, ns, max_mm, gap_len, gap_fb;$/;"	m	struct:_SOAPOPT_
aln_local_core	stdaln.c	/^int aln_local_core(unsigned char *seq1,const int len1, unsigned char *seq2,const int len2, const AlnParam *ap,$/;"	f
aln_nt16_rev_table	stdaln.c	/^char *aln_nt16_rev_table = "XAGRCMSVTWKDYHBN-";$/;"	v
aln_nt16_table	stdaln.c	/^unsigned char aln_nt16_table[256] = {$/;"	v
aln_nt4_rev_table	stdaln.c	/^char *aln_nt4_rev_table = "AGCTN-";$/;"	v
aln_nt4_table	stdaln.c	/^unsigned char aln_nt4_table[256] = {$/;"	v
aln_param_aa2aa	stdaln.c	/^AlnParam aln_param_aa2aa   = { 10,  2,  2, aln_sm_blosum62, 22, 50 };$/;"	v
aln_param_blast	stdaln.c	/^AlnParam aln_param_blast   = {  5,  2,  5, aln_sm_blast, 5, 50 };$/;"	v
aln_param_bwa	stdaln.c	/^AlnParam aln_param_bwa     = { 26,  9,  5, aln_sm_maq, 5, 50 };$/;"	v
aln_param_nt2nt	stdaln.c	/^AlnParam aln_param_nt2nt   = {  8,  2,  2, aln_sm_nt, 16, 75 };$/;"	v
aln_param_rd2rd	stdaln.c	/^AlnParam aln_param_rd2rd   = {  1, 19, 19, aln_sm_read, 16, 75 };$/;"	v
aln_path2cigar	stdaln.c	/^cigar_t *aln_path2cigar(const path_t *path, int path_len, int *n_cigar)$/;"	f
aln_sm_blast	stdaln.c	/^int aln_sm_blast[] = {$/;"	v
aln_sm_blosum45	stdaln.c	/^int aln_sm_blosum45[] = {$/;"	v
aln_sm_blosum62	stdaln.c	/^int aln_sm_blosum62[] = {$/;"	v
aln_sm_hs	stdaln.c	/^int aln_sm_hs[] = {$/;"	v
aln_sm_maq	stdaln.c	/^int aln_sm_maq[] = {$/;"	v
aln_sm_nt	stdaln.c	/^int aln_sm_nt[] = {$/;"	v
aln_sm_read	stdaln.c	/^int aln_sm_read[] = {$/;"	v
aln_stdaln	stdaln.c	/^AlnAln *aln_stdaln(const char *seq1, const char *seq2, const AlnParam *ap, int is_global, int do_align)$/;"	f
aln_stdaln_aux	stdaln.c	/^AlnAln *aln_stdaln_aux(const char *seq1, const char *seq2, const AlnParam *ap,$/;"	f
aln_trans_table_eu	stdaln.c	/^unsigned char aln_trans_table_eu[66] = {$/;"	v
aln_trans_table_eu_char	stdaln.c	/^char *aln_trans_table_eu_char = "KKNNRRSSTTTTIMIIEEDDGGGGAAAAVVVVQQHHRRRRPPPPLLLL**YY*WCCSSSSLLFFX";$/;"	v
ambiguityCount	HSP.h	/^static const char ambiguityCount[16]    = { 1 ,  1 ,  1 ,  1 ,  2 ,  2 ,  2 ,  3 ,  2 ,  2 ,  3 ,  2 ,  3 ,  3 ,  4 ,  0 };$/;"	v
ambiguityMatch	HSP.h	/^static const char ambiguityMatch[16][4] = {{0, 0, 0, 0},$/;"	v
asciiTime	Timing.c	/^void asciiTime(const char *c){$/;"	f
average	MiscUtilities.h	40;"	d
b	extratools.h	/^       unsigned int b;$/;"	m	struct:HASHTABLE_TYPE
band_width	stdaln.h	/^	int band_width;$/;"	m	struct:__anon4
bisulfite	Match.h	/^	int bisulfite;$/;"	m	struct:_SOAPOPT_
bitCopy	MiscUtilities.c	/^unsigned int bitCopy(unsigned int *destinationAddress, int destinationWordOffset, int destinationBitOffset,$/;"	f
bitCopyDestWordOffsetOnly	MiscUtilities.c	/^void bitCopyDestWordOffsetOnly(unsigned int *destinationAddress, unsigned int destinationWordOffset,$/;"	f
bitCopyNoDestOffset	MiscUtilities.c	/^void bitCopyNoDestOffset(unsigned int *destinationAddress, const unsigned int *sourceAddress,$/;"	f
blockEnd	HSP.h	/^	unsigned int blockEnd;$/;"	m	struct:_ChrBlock
blockInChr	HSP.h	/^	ChrBlock *blockInChr;$/;"	m	struct:_NewAnnotation
blockList	BWT.h	/^	ChrBlock *blockList;$/;"	m	struct:_BWTOPT_TYPE_
blockList	HSP.h	/^	ChrBlock *blockList;$/;"	m	struct:HSP
blockNum	HSP.h	/^	int blockNum;$/;"	m	struct:_NewAnnotation
blockStart	HSP.h	/^	unsigned int blockStart;$/;"	m	struct:_ChrBlock
blockid	extratools.h	/^	unsigned int occ_pos, pos, blockid;$/;"	m	struct:_HITITEM_TYPE_
boundaryCushionSize	MemManager.h	/^	unsigned int boundaryCushionSize;			\/\/ boundary cushion is a piece of memory allocated so that the memory around items can be safely referenced$/;"	m	struct:MMBulk
bwt	Match.c	/^	BWT *bwt;$/;"	m	struct:_THREADAUX_TYPE_	file:
bwtCode	BWT.h	/^	unsigned int *bwtCode;				\/\/ BWT code$/;"	m	struct:BWT
bwtSaRetrieved	BWT.h	/^	unsigned int bwtSaRetrieved;$/;"	m	struct:BWTSaRetrievalStatistics
bwtSizeInWord	BWT.h	/^	unsigned int bwtSizeInWord;			\/\/ Temporary variable to hold the memory allocated$/;"	m	struct:BWT
ceilLog2	MiscUtilities.c	/^unsigned int ceilLog2(const unsigned int input) {$/;"	f
chain	Match.h	/^	int fast, o_format, chain;$/;"	m	struct:_SOAPOPT_
charBeingProcessed	BWT.h	/^	int charBeingProcessed;$/;"	m	struct:DPText
charMap	soap.c	/^unsigned char charMap[256];$/;"	v
checkDuplicate	MiscUtilities.c	/^unsigned int checkDuplicate(int *input, const unsigned int numItem, const int minValue, const int maxValue, char* text) {$/;"	f
chr	extratools.h	/^	int chr;$/;"	m	struct:_HITITEM_TYPE_
chrEnd	HSP.h	/^	unsigned int chrEnd;$/;"	m	struct:_NewAnnotation
chrID	HSP.h	/^	int chrID;$/;"	m	struct:_ChrBlock
chrName	HSP.h	/^	char **chrName;$/;"	m	struct:HSP
chrName	HSP.h	/^	char chrName[MAX_SEQ_NAME_LENGTH];$/;"	m	struct:_NewAnnotation
chrName	soapio.h	/^	char **chrName;$/;"	m	struct:_OUTAUX_TYPE_
chrNum	HSP.h	/^	int chrNum;$/;"	m	struct:HSP
chrNum	soapio.h	/^	int id, un, chrNum;$/;"	m	struct:_OUTAUX_TYPE_
chrStart	HSP.h	/^	unsigned int chrStart;$/;"	m	struct:_NewAnnotation
cigar	extratools.h	/^	unsigned short *cigar;$/;"	m	struct:_HITITEM_TYPE_
cigar	stdaln.h	/^	cigar_t *cigar;$/;"	m	struct:__anon6
cigar_t	stdaln.h	/^typedef unsigned short cigar_t;$/;"	t
complementMap	soap.c	/^unsigned char complementMap[256];$/;"	v
count	extratools.h	/^    unsigned int count;$/;"	m	struct:HASHCELL_TYPE
ctype	stdaln.h	/^	unsigned char ctype;$/;"	m	struct:__anon5
cumulativeFreq	BWT.h	/^	unsigned int *cumulativeFreq;		\/\/ cumulative frequency$/;"	m	struct:BWT
currentDirectoryEntry	MemManager.h	/^	unsigned int currentDirectoryEntry;$/;"	m	struct:MMBulk
currentTempByteDispatched	MemManager.h	/^	unsigned int currentTempByteDispatched;		\/\/ Includes any spillover$/;"	m	struct:MMPool
currentTempByteSpillover	MemManager.h	/^	unsigned int currentTempByteSpillover;		\/\/ Exclude spillover pointers$/;"	m	struct:MMPool
currentUnitByteAllocated	MemManager.h	/^	unsigned int currentUnitByteAllocated;$/;"	m	struct:MMMaster
cutoff	BWT.h	/^	int cutoff;$/;"	m	struct:_BWTOPT_TYPE_
cutoff	Match.h	/^	int mode, cutoff; $/;"	m	struct:_SOAPOPT_
cutoff	Match.h	/^        int cutoff, len;$/;"	m	struct:_PEAUX_TYPE_
database_prefix	soap.c	/^char database_prefix[MAX_FILENAME_LEN]                         = "";$/;"	v
decodeTable	BWT.h	/^	unsigned int *decodeTable;			\/\/ For decoding BWT by table lookup$/;"	m	struct:BWT
decodeTableGenerated	BWT.h	/^	unsigned int decodeTableGenerated;	\/\/ == TRUE if decode table is generated on load and will be freed$/;"	m	struct:BWT
directory	MemManager.h	/^	unsigned char **directory;			\/\/ if bulk is freed, = NULL$/;"	m	struct:MMBulk
directorySize	MemManager.h	/^	unsigned int directorySize;$/;"	m	struct:MMBulk
dnaChar	HSP.h	/^static const char dnaChar[16]			= {'A', 'C', 'G', 'T', 'M', 'R', 'S', 'V', 'W', 'Y', 'H', 'K', 'D', 'B', 'N', 'L'};$/;"	v
dnaComplement	HSP.h	/^static const char dnaComplement[16]		= {'T', 'G', 'C', 'A', 'K', 'Y', 'S', 'B', 'W', 'R', 'D', 'M', 'H', 'V', 'N', 'L'};$/;"	v
dnaLen	BWT.h	/^	unsigned int dnaLen;$/;"	m	struct:_BWTOPT_TYPE_
dnaLen	Match.h	/^	unsigned int dnaLen;$/;"	m	struct:_MATCHAUX_TYPE_
dnaLength	HSP.h	/^	unsigned int dnaLength;$/;"	m	struct:HSP
dpCellIndex	BWT.h	/^	int dpCellIndex;$/;"	m	struct:DPText
dpcell_t	stdaln.c	/^} dpcell_t;$/;"	t	typeref:struct:__anon1	file:
dpscore_t	stdaln.c	/^} dpscore_t;$/;"	t	typeref:struct:__anon2	file:
dr250	r250.c	/^double dr250()		\/* returns a random double in range 0..1 *\/$/;"	f
dummy1	BWT.h	/^	unsigned int dummy1;	\/\/ Must not be removed; so that saIndexLeft and saIndexRight are aligned to 16 byte boundary$/;"	m	struct:DPText
end	ModifyAnn.c	/^	unsigned int end;$/;"	m	struct:_CHRANN_TYPE	file:
end1	stdaln.h	/^	int start1, end1; \/* start and end of the first sequence, coordinations are 1-based *\/$/;"	m	struct:__anon6
end2	stdaln.h	/^	int start2, end2; \/* start and end of the second sequence, coordinations are 1-based *\/$/;"	m	struct:__anon6
endSaIndex	BWT.h	/^	unsigned int endSaIndex;$/;"	m	struct:SaIndexRange
error	BWT.h	/^	unsigned error    : 8;		\/\/ error in hit$/;"	m	struct:SaIndexGroupWithLengthError
errorBitVector	BWT.h	/^	unsigned int errorBitVector;			\/\/ error bit vector$/;"	m	struct:SaIndexGroupWithErrorBitVector
errorPos	BWT.h	/^	int *errorPos;$/;"	m	struct:HitCombination
ext	Match.h	/^	int len, ext;$/;"	m	struct:_MATCHAUX_TYPE_
fast	Match.h	/^	int fast, o_format, chain;$/;"	m	struct:_SOAPOPT_
fasta	SeqIO.c	/^int fasta(FILE *fp, seq_t *seq, const int CONV){$/;"	f
fastq	SeqIO.c	/^int fastq (FILE *fp, seq_t *seq, const int CONV) {$/;"	f
firstSpillOverAddress	MemManager.h	/^	void *firstSpillOverAddress;				\/\/ if pool is freed, = address of mmPool$/;"	m	struct:MMPool
flag	soapio.h	/^	unsigned int flag;$/;"	m	struct:_ALNSEQ_TYPE_
floorLog2	MiscUtilities.c	/^unsigned int floorLog2(const unsigned int input) {$/;"	f
fopen64	TypeNLimit.h	51;"	d
fopen64	TypeNLimit.h	62;"	d
formatVALAsBinary	MiscUtilities.c	/^void formatVALAsBinary(const unsigned int input, char* output, unsigned int bitGroup) {$/;"	f
ftello64	TypeNLimit.h	52;"	d
ftello64	TypeNLimit.h	63;"	d
fw	BWT.h	/^	char *fw, *rc;$/;"	m	struct:_BWTOPT_TYPE_
gap_beg	extratools.h	/^	int n_gapo, n_gape, gap_beg;$/;"	m	struct:_HITITEM_TYPE_
gap_end	stdaln.h	/^	int gap_end;$/;"	m	struct:__anon4
gap_ext	stdaln.h	/^	int gap_ext;$/;"	m	struct:__anon4
gap_fb	BWT.h	/^	int max_mm, gap_len, gap_fb;$/;"	m	struct:_BWTOPT_TYPE_
gap_fb	Match.h	/^	int aln_len, ns, max_mm, gap_len, gap_fb;$/;"	m	struct:_SOAPOPT_
gap_len	BWT.h	/^	int max_mm, gap_len, gap_fb;$/;"	m	struct:_BWTOPT_TYPE_
gap_len	Match.h	/^	int aln_len, ns, max_mm, gap_len, gap_fb;$/;"	m	struct:_SOAPOPT_
gap_open	stdaln.h	/^	int gap_open;$/;"	m	struct:__anon4
getElapsedTime	Timing.c	/^double getElapsedTime(double startTime) {$/;"	f
getHASHRetrieved	extratools.c	/^unsigned int getHASHRetrieved() {return retrieveHASH;}$/;"	f
getRandomSeed	MiscUtilities.c	/^unsigned int getRandomSeed() {$/;"	f
getSARetrieved	extratools.c	/^unsigned int getSARetrieved() {return retrieveSA;}$/;"	f
getTextPositionTime	extratools.c	/^double getTextPositionTime() {return textPositionTimeTotal;}$/;"	f
gi	HSP.h	/^	int gi;$/;"	m	struct:Annotation
h	BWT.h	/^	int h, x, y;$/;"	m	struct:_BWTOPT_TYPE_
hsp	Match.c	/^	HSP *hsp;$/;"	m	struct:_THREADAUX_TYPE_	file:
i	stdaln.h	/^	int i, j;$/;"	m	struct:__anon5
id	Match.h	/^	int id;$/;"	m	struct:_SOAPOPT_
id	ModifyAnn.c	/^	int id;$/;"	m	struct:_CHRANN_TYPE	file:
id	soapio.h	/^	int id, len, ns;$/;"	m	struct:_ALNSEQ_TYPE_
id	soapio.h	/^	int id, un, chrNum;$/;"	m	struct:_OUTAUX_TYPE_
id	soapio.h	/^        int id;$/;"	m	struct:_INFILELIST_
id	soapio.h	/^        int id;$/;"	m	struct:_OUTFILELIST_
ifdA	Match.h	/^	int ifdA, ifdB;$/;"	m	struct:_FILEDS_
ifdB	Match.h	/^	int ifdA, ifdB;$/;"	m	struct:_FILEDS_
ifpA	soapio.h	/^	FILE *ifpA, *ifpB;$/;"	m	struct:_INFILELIST_
ifpB	soapio.h	/^	FILE *ifpA, *ifpB;$/;"	m	struct:_INFILELIST_
index	extratools.h	/^    unsigned int index;$/;"	m	struct:HASHCELL_TYPE
indexMask	MemManager.h	/^	unsigned int indexMask;$/;"	m	struct:MMBulk
info	BWT.h	/^	unsigned int info;					\/\/ extra hit information$/;"	m	struct:SaIndexGroup
info	BWT.h	/^	unsigned int info;					\/\/ extra hit information; to be copied to hitList.info$/;"	m	struct:SaIndexGroupNew
info	BWT.h	/^	unsigned int info;					\/\/ extra hit information; to be copied to hitList.info$/;"	m	struct:SaIndexGroupOld
info	extratools.h	/^	int info;$/;"	m	struct:_HITITEM_TYPE_
init	MiscUtilities.h	32;"	d
initializeCHAR	MiscUtilities.c	/^void initializeCHAR(unsigned char *startAddr, const unsigned int length, const unsigned char initValue) {$/;"	f
initializeVAL	MiscUtilities.c	/^void initializeVAL(unsigned int *startAddr, const unsigned int length, const unsigned int initValue) {$/;"	f
inverseSa	BWT.h	/^	unsigned int *inverseSa;			\/\/ Inverse SA stored explicitly$/;"	m	struct:BWT
inverseSa0	BWT.h	/^	unsigned int inverseSa0;			\/\/ SA-1[0]$/;"	m	struct:BWT
inverseSaInterval	BWT.h	/^	unsigned int inverseSaInterval;		\/\/ interval between two inverse SA stored explicitly$/;"	m	struct:BWT
inverseSaSize	BWT.h	/^	unsigned int inverseSaSize;			\/\/ Temporary variable to hold the memory allocated$/;"	m	struct:BWT
itemList	extratools.h	/^	HITITEM *itemList;$/;"	m	struct:_HITTABLE_TYPE_
itemList	extratools.h	/^       HASHITEM * itemList;$/;"	m	struct:HASHTABLE_TYPE
itemList	soapio.h	/^	HITITEM *itemList;$/;"	m	struct:_ALNSEQ_TYPE_
itemPerAllocationInPowerOf2	MemManager.h	/^	unsigned int itemPerAllocationInPowerOf2;$/;"	m	struct:MMBulk
itemSize	MemManager.h	/^	unsigned int itemSize;$/;"	m	struct:MMBulk
j	stdaln.h	/^	int i, j;$/;"	m	struct:__anon5
keyLength	BWT.h	/^	int keyLength;$/;"	m	struct:HitCombination
kputc	kstring.h	/^static inline int kputc(int c, kstring_t *s)$/;"	f
kputs	kstring.h	/^static inline int kputs(const char *p, kstring_t *s)$/;"	f
kroundup32	kstring.h	8;"	d
ksprintf	kstring.c	/^int ksprintf(kstring_t *s, const char *fmt, ...)$/;"	f
kstring_t	kstring.h	/^} kstring_t;$/;"	t	typeref:struct:__kstring_t
l	SeqIO.h	/^	int max, l, ns;$/;"	m	struct:_SEQ_T_
l	extratools.h	/^    unsigned int l;$/;"	m	struct:HASHITEM_TYPE
l	kstring.h	/^	size_t l, m;$/;"	m	struct:__kstring_t
lastAlignedBoundary	MiscUtilities.h	39;"	d
lastDupSaIndexGroupIndex	BWT.h	/^	unsigned int lastDupSaIndexGroupIndex;	\/\/ index to last duplicated group$/;"	m	struct:DupSaIndexGroup
leadingZero	MiscUtilities.c	/^unsigned int leadingZero(const unsigned int input) {$/;"	f
len	Match.h	/^	int len, ext;$/;"	m	struct:_MATCHAUX_TYPE_
len	Match.h	/^        int cutoff, len;$/;"	m	struct:_PEAUX_TYPE_
len	soapio.h	/^	int id, len, ns;$/;"	m	struct:_ALNSEQ_TYPE_
length	BWT.h	/^	unsigned length   : 8;		\/\/ length of hit$/;"	m	struct:SaIndexGroupWithLengthError
lock	Match.h	/^static pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v
lock	soapio.h	/^	int lock;$/;"	m	struct:_INFILELIST_
lock	soapio.h	/^	int lock;$/;"	m	struct:_OUTFILELIST_
lookup	Match.c	/^	LOOKUPTABLE *lookup;$/;"	m	struct:_THREADAUX_TYPE_	file:
lowercaseDnaCharIndex	HSP.h	/^static const char lowercaseDnaCharIndex = 14;	\/\/ Seems that BLAST treat masked characters as 'N' (still have 1\/4 chance of matching)$/;"	v
m	kstring.h	/^	size_t l, m;$/;"	m	struct:__kstring_t
main	ModifyAnn.c	/^int main(int argc, char **argv){$/;"	f
main	kstring.c	/^int main()$/;"	f
main	soap.c	/^int main(int argc, char *argv[]){$/;"	f
matrix	stdaln.h	/^	int *matrix;$/;"	m	struct:__anon4
max	MiscUtilities.h	42;"	d
max	SeqIO.h	/^	int max, l, ns;$/;"	m	struct:_SEQ_T_
max	soapio.h	/^	int n, max;$/;"	m	struct:_MULTISEQ_TYPE_
maxDPCell	BWT.h	/^	int maxDPCell;$/;"	m	struct:BWTDPStatistics
maxDPMemoryInWord	BWT.h	/^	int maxDPMemoryInWord;$/;"	m	struct:BWTDPStatistics
maxDepth	BWT.h	/^	int maxDepth;$/;"	m	struct:BWTDPStatistics
maxError	BWT.h	/^	int maxError;$/;"	m	struct:HitCombination
maxNumberOfBulks	MemManager.h	/^	unsigned int maxNumberOfBulks;$/;"	m	struct:MMMaster
maxNumberOfPools	MemManager.h	/^	unsigned int maxNumberOfPools;$/;"	m	struct:MMMaster
maxTotalByteAllocated	MemManager.h	/^	unsigned int maxTotalByteAllocated;$/;"	m	struct:MMMaster
maxTotalByteDispatched	MemManager.h	/^	unsigned int maxTotalByteDispatched;		\/\/ The max of pool memory + temp memory dispatched$/;"	m	struct:MMPool
maxTotalByteDispatched	MemManager.h	/^	unsigned int maxTotalByteDispatched;$/;"	m	struct:MMMaster
maxUnitByteAllocated	MemManager.h	/^	unsigned int maxUnitByteAllocated;$/;"	m	struct:MMMaster
max_ins	Match.h	/^	int min_ins, max_ins, FR;$/;"	m	struct:_SOAPOPT_
max_ins	Match.h	/^	int min_ins, max_ins;$/;"	m	struct:_PEAUX_TYPE_
max_mm	BWT.h	/^	int max_mm, gap_len, gap_fb;$/;"	m	struct:_BWTOPT_TYPE_
max_mm	Match.h	/^	int aln_len, ns, max_mm, gap_len, gap_fb;$/;"	m	struct:_SOAPOPT_
max_mm	Match.h	/^	int max_mm;$/;"	m	struct:_MATCHAUX_TYPE_
md	extratools.h	/^	char *md;$/;"	m	struct:_HITITEM_TYPE_
med3	MiscUtilities.h	43;"	d
med3Index	MiscUtilities.h	44;"	d
min	MiscUtilities.h	41;"	d
min_ins	Match.h	/^	int min_ins, max_ins, FR;$/;"	m	struct:_SOAPOPT_
min_ins	Match.h	/^	int min_ins, max_ins;$/;"	m	struct:_PEAUX_TYPE_
mmBulk	MemManager.h	/^	MMBulk **mmBulk;$/;"	m	struct:MMMaster
mmMaster	MemManager.c	/^MMMaster mmMaster;$/;"	v
mmPool	MemManager.h	/^	MMPool **mmPool;$/;"	m	struct:MMMaster
mode	Match.h	/^	int mode, cutoff; $/;"	m	struct:_SOAPOPT_
mseqs	Match.c	/^	MULTISEQ *mseqs;$/;"	m	struct:_THREADAUX_TYPE_	file:
n	extratools.h	/^	int n;$/;"	m	struct:_HITTABLE_TYPE_
n	soapio.h	/^	int n, max;$/;"	m	struct:_MULTISEQ_TYPE_
n_cigar	extratools.h	/^	int n_cigar;$/;"	m	struct:_HITITEM_TYPE_
n_cigar	stdaln.h	/^	int n_cigar;$/;"	m	struct:__anon6
n_diff	extratools.h	/^	int n_diff;$/;"	m	struct:_HITITEM_TYPE_
n_gape	extratools.h	/^	int n_gapo, n_gape, gap_beg;$/;"	m	struct:_HITITEM_TYPE_
n_gapo	extratools.h	/^	int n_gapo, n_gape, gap_beg;$/;"	m	struct:_HITITEM_TYPE_
n_mm	extratools.h	/^	int n_mm;$/;"	m	struct:_HITITEM_TYPE_
name	SeqIO.h	/^	char name[MAX_NAME_LEN];$/;"	m	struct:_SEQ_T_
name	soapio.h	/^	char *name, *seq, *rc, *qual, *rcqual;$/;"	m	struct:_ALNSEQ_TYPE_
nameLen	HSP.h	/^	int nameLen;$/;"	m	struct:_NewAnnotation
nblock	BWT.h	/^	int nblock;$/;"	m	struct:_BWTOPT_TYPE_
nextAlignedBoundary	MiscUtilities.h	38;"	d
nextPrime	MiscUtilities.c	/^unsigned int nextPrime(const unsigned int number) {$/;"	f
nextUnusedItem	MemManager.h	/^	unsigned int nextUnusedItem;$/;"	m	struct:MMBulk
nhits	soapio.h	/^	int nhits;$/;"	m	struct:_ALNSEQ_TYPE_
nonMatchDnaCharIndex	HSP.h	/^static const char nonMatchDnaCharIndex  = 15;$/;"	v
ns	Match.h	/^	int aln_len, ns, max_mm, gap_len, gap_fb;$/;"	m	struct:_SOAPOPT_
ns	SeqIO.h	/^	int max, l, ns;$/;"	m	struct:_SEQ_T_
ns	soapio.h	/^	int id, len, ns;$/;"	m	struct:_ALNSEQ_TYPE_
nthreads	Match.h	/^	int nthreads;	\/\/number of pthreads$/;"	m	struct:_SOAPOPT_
numOfBlock	HSP.h	/^	int numOfBlock;$/;"	m	struct:HSP
numOfCombination	BWT.h	/^	int numOfCombination;$/;"	m	struct:HitCombination
numOfDpCellSegment	BWT.h	/^	int numOfDpCellSegment;$/;"	m	struct:DPText
numOfMatch	BWT.h	/^	unsigned int numOfMatch;				\/\/ number of match$/;"	m	struct:SaIndexGroupNew
numOfMatch	BWT.h	/^	unsigned int numOfMatch;				\/\/ number of match$/;"	m	struct:SaIndexGroupOld
numOfMatch	BWT.h	/^	unsigned int numOfMatch;			\/\/ number of match$/;"	m	struct:SaIndexGroup
numOfMatch	BWT.h	/^	unsigned int numOfMatch;			\/\/ number of match$/;"	m	struct:SaIndexGroupProcessed
numOfMatch	BWT.h	/^	unsigned int numOfMatch;			\/\/ number of match$/;"	m	struct:SaIndexGroupWithErrorBitVector
numOfMatch	BWT.h	/^	unsigned int numOfMatch;			\/\/ number of match$/;"	m	struct:SaIndexGroupWithLengthError
numberOfMatchInCHAR	MiscUtilities.c	/^unsigned int numberOfMatchInCHAR(unsigned char *startAddr, const unsigned int length, const unsigned char searchValue) {$/;"	f
numberOfMatchInVAL	MiscUtilities.c	/^unsigned int numberOfMatchInVAL(unsigned int *startAddr, const unsigned int length, const unsigned int searchValue) {$/;"	f
o	Match.c	/^	SOAPOPT *o;$/;"	m	struct:_THREADAUX_TYPE_	file:
o_format	Match.h	/^	int fast, o_format, chain;$/;"	m	struct:_SOAPOPT_
occBwt	extratools.h	/^BWT * occBwt;$/;"	v
occCollected	extratools.h	/^unsigned int occCollected;$/;"	v
occCollector	extratools.h	/^unsigned int * occCollector;$/;"	v
occHashtable	extratools.h	/^HASHTABLE * occHashtable;$/;"	v
occIndex	extratools.h	/^    unsigned int occIndex;$/;"	m	struct:HASHITEM_TYPE
occList	extratools.h	/^       OCC * occList;$/;"	m	struct:HASHTABLE_TYPE
occMajorSizeInWord	BWT.h	/^	unsigned int occMajorSizeInWord;	\/\/ Temporary variable to hold the memory allocated$/;"	m	struct:BWT
occSizeInWord	BWT.h	/^	unsigned int occSizeInWord;			\/\/ Temporary variable to hold the memory allocated$/;"	m	struct:BWT
occValue	BWT.h	/^	unsigned int *occValue;				\/\/ Occurrence values stored explicitly$/;"	m	struct:BWT
occValueMajor	BWT.h	/^	unsigned int *occValueMajor;		\/\/ Occurrence values stored explicitly$/;"	m	struct:BWT
occ_pos	extratools.h	/^	unsigned int occ_pos, pos, blockid;$/;"	m	struct:_HITITEM_TYPE_
ofdAln	Match.h	/^	int ofdAln, ofdSe, ofdUn;$/;"	m	struct:_FILEDS_
ofdSe	Match.h	/^	int ofdAln, ofdSe, ofdUn;$/;"	m	struct:_FILEDS_
ofdUn	Match.h	/^	int ofdAln, ofdSe, ofdUn;$/;"	m	struct:_FILEDS_
ofpAln	soapio.h	/^	FILE *ofpAln, *ofpSe, *ofpUn;$/;"	m	struct:_OUTFILELIST_
ofpSe	soapio.h	/^	FILE *ofpAln, *ofpSe, *ofpUn;$/;"	m	struct:_OUTFILELIST_
ofpUn	soapio.h	/^	FILE *ofpAln, *ofpSe, *ofpUn;$/;"	m	struct:_OUTFILELIST_
opt	soap.c	/^static SOAPOPT *opt;$/;"	v	file:
ori	HSP.h	/^	unsigned int ori;$/;"	m	struct:_ChrBlock
ori	ModifyAnn.c	/^	unsigned int ori;$/;"	m	struct:_CHRANN_TYPE	file:
out1	stdaln.h	/^	char *out1, *out2; \/* print them, and then you will know *\/$/;"	m	struct:__anon6
out2	stdaln.h	/^	char *out1, *out2; \/* print them, and then you will know *\/$/;"	m	struct:__anon6
outFileName	soap.c	/^char outFileName[MAX_FILENAME_LEN]                             = "";$/;"	v
outUnmapFileName	soap.c	/^char outUnmapFileName[MAX_FILENAME_LEN]                        = "";$/;"	v
outUnpairFileName	soap.c	/^char outUnpairFileName[MAX_FILENAME_LEN]                       = "";$/;"	v
outm	stdaln.h	/^	char *outm;$/;"	m	struct:__anon6
pac	Match.h	/^	unsigned int *pac;$/;"	m	struct:_MATCHAUX_TYPE_
pacRef	BWT.h	/^	unsigned int *pacRef;$/;"	m	struct:_BWTOPT_TYPE_
packedDNA	HSP.h	/^	unsigned int* packedDNA;$/;"	m	struct:HSP
path	stdaln.h	/^	path_t *path; \/* for advanced users... :-) *\/$/;"	m	struct:__anon6
path_len	stdaln.h	/^	int path_len; \/* for advanced users... :-) *\/$/;"	m	struct:__anon6
path_t	stdaln.h	/^} path_t;$/;"	t	typeref:struct:__anon5
pe	Match.h	/^	int pe;$/;"	m	struct:_SOAPOPT_
poolByteDispatched	MemManager.h	/^	unsigned int poolByteDispatched;			\/\/ Includes any spillover and memory skipped for align$/;"	m	struct:MMPool
poolByteSpillover	MemManager.h	/^	unsigned int poolByteSpillover;				\/\/ Exclude spillover pointers$/;"	m	struct:MMPool
poolSize	MemManager.h	/^	unsigned int poolSize;						\/\/ Size of memory pool; the beginning of the pool holds the MMPool structure$/;"	m	struct:MMPool
popCount	MiscUtilities.c	/^unsigned int popCount(const unsigned int bitVector) {$/;"	f
pos	extratools.h	/^	unsigned int occ_pos, pos, blockid;$/;"	m	struct:_HITITEM_TYPE_
posQuery	BWT.h	/^	unsigned int posQuery;				\/\/ position in query; used for detecting diagonal hits$/;"	m	struct:SaIndexGroupNew
posQuery	BWT.h	/^	unsigned posQuery : 16;		\/\/ position in query$/;"	m	struct:SaIndexGroupWithLengthError
power	MiscUtilities.c	/^unsigned int power(const unsigned int base, const unsigned int power) {$/;"	f
prime	extratools.h	/^       unsigned int prime;$/;"	m	struct:HASHTABLE_TYPE
printElapsedTime	Timing.c	/^void printElapsedTime(FILE *file, const int printHour, const int printMin, const int printSec,$/;"	f
printElapsedTimeNoNewLine	Timing.c	/^void printElapsedTimeNoNewLine(FILE *file, const int printHour, const int printMin, const int printSec,$/;"	f
qual	SeqIO.h	/^	char *seq, *rc, *qual;$/;"	m	struct:_SEQ_T_
qual	soapio.h	/^	char *name, *seq, *rc, *qual, *rcqual;$/;"	m	struct:_ALNSEQ_TYPE_
r	extratools.h	/^    unsigned int r;$/;"	m	struct:HASHITEM_TYPE
r250	r250.c	/^unsigned int r250()		\/* returns a random unsigned integer *\/$/;"	f
r250_buffer	r250.c	/^static unsigned int r250_buffer[ 250 ];$/;"	v	file:
r250_index	r250.c	/^static int r250_index;$/;"	v	file:
r250_init	r250.c	/^void r250_init(int sd)$/;"	f
randlcg	r250.c	/^static unsigned int randlcg(int sd)       \/* returns a random unsigned integer *\/$/;"	f	file:
rc	BWT.h	/^	char *fw, *rc;$/;"	m	struct:_BWTOPT_TYPE_
rc	SeqIO.h	/^	char *seq, *rc, *qual;$/;"	m	struct:_SEQ_T_
rc	soapio.h	/^	char *name, *seq, *rc, *qual, *rcqual;$/;"	m	struct:_ALNSEQ_TYPE_
rcqual	soapio.h	/^	char *name, *seq, *rc, *qual, *rcqual;$/;"	m	struct:_ALNSEQ_TYPE_
readAFileName	soap.c	/^char readAFileName[MAX_FILENAME_LEN]                           = "";$/;"	v
readBFileName	soap.c	/^char readBFileName[MAX_FILENAME_LEN]                           = "";$/;"	v
registerQIndex	extratools.c	/^void registerQIndex(unsigned int index) {$/;"	f
registerQSection	extratools.c	/^void registerQSection() {$/;"	f
registerTPFile	extratools.c	/^void registerTPFile(FILE * filePtr,unsigned int searchMode) {$/;"	f
rejectedNode	BWT.h	/^	LONG* __restrict rejectedNode;$/;"	m	struct:BWTDPStatistics
rejectedPath	BWT.h	/^	LONG rejectedPath;$/;"	m	struct:BWTDPStatistics
rejectedPathDepth	BWT.h	/^	LONG rejectedPathDepth;$/;"	m	struct:BWTDPStatistics
report	soapio.h	/^	int report;$/;"	m	struct:_ALNSEQ_TYPE_
retrieveHASH	extratools.c	/^unsigned int retrieveSA=0,retrieveHASH=0;$/;"	v
retrieveSA	extratools.c	/^unsigned int retrieveSA=0,retrieveHASH=0;$/;"	v
rev_bwt	Match.c	/^	BWT *rev_bwt;$/;"	m	struct:_THREADAUX_TYPE_	file:
rev_lookup	Match.c	/^	LOOKUPTABLE *rev_lookup;$/;"	m	struct:_THREADAUX_TYPE_	file:
reverse	soapio.c	/^static inline  char * reverse(const  char *seq, int len){$/;"	f	file:
reverseBit	MiscUtilities.c	/^unsigned int reverseBit(unsigned int x)$/;"	f
row	stdaln.h	/^	int row;$/;"	m	struct:__anon4
rr	Match.h	/^	int rr;$/;"	m	struct:_SOAPOPT_
s	kstring.h	/^	char *s;$/;"	m	struct:__kstring_t
saDiagonalFiltered	BWT.h	/^	unsigned int saDiagonalFiltered;$/;"	m	struct:BWTSaRetrievalStatistics
saDiagonalLinked	BWT.h	/^	unsigned int saDiagonalLinked;$/;"	m	struct:BWTSaRetrievalStatistics
saDuplicated	BWT.h	/^	unsigned int saDuplicated;$/;"	m	struct:BWTSaRetrievalStatistics
saIndex	BWT.h	/^	unsigned int saIndex;$/;"	m	struct:SaIndexList
saIndexGroupIndex	BWT.h	/^	unsigned int saIndexGroupIndex;			\/\/ index to the first SA into group among the duplicates$/;"	m	struct:DupSaIndexGroup
saIndexGroupIndex	BWT.h	/^	unsigned int saIndexGroupIndex;$/;"	m	struct:SaIndexGroupHash
saIndexLeft	BWT.h	/^	unsigned int saIndexLeft[ALPHABET_SIZE];$/;"	m	struct:DPText
saIndexRange	BWT.h	/^	SaIndexRange *saIndexRange;			\/\/ SA index range$/;"	m	struct:BWT
saIndexRangeNumOfChar	BWT.h	/^	int saIndexRangeNumOfChar;			\/\/ Number of characters indexed in SA index range$/;"	m	struct:BWT
saIndexRangeSize	BWT.h	/^	unsigned int saIndexRangeSize;		\/\/ Temporary variable to hold the memory allocated$/;"	m	struct:BWT
saIndexRight	BWT.h	/^	unsigned int saIndexRight[ALPHABET_SIZE];$/;"	m	struct:DPText
saInterval	BWT.h	/^	unsigned int saInterval;			\/\/ interval between two SA values stored explicitly$/;"	m	struct:BWT
saValue	BWT.h	/^	unsigned int *saValue;				\/\/ SA values stored explicitly$/;"	m	struct:BWT
saValueOnBoundary	BWT.h	/^	unsigned int *saValueOnBoundary;	\/\/ Pre-calculated frequently referred data$/;"	m	struct:BWT
saValueSize	BWT.h	/^	unsigned int saValueSize;			\/\/ Temporary variable to hold the memory allocated$/;"	m	struct:BWT
score	stdaln.h	/^	int score; \/* score *\/$/;"	m	struct:__anon6
seq	SeqIO.h	/^	char *seq, *rc, *qual;$/;"	m	struct:_SEQ_T_
seq	soapio.h	/^	char *name, *seq, *rc, *qual, *rcqual;$/;"	m	struct:_ALNSEQ_TYPE_
seqLen	BWT.h	/^	int alnLen, seqLen;$/;"	m	struct:_BWTOPT_TYPE_
seqList	soapio.h	/^	ALNSEQ *seqList;$/;"	m	struct:_MULTISEQ_TYPE_
seq_t	SeqIO.h	/^}seq_t;$/;"	t	typeref:struct:_SEQ_T_
setStartTime	Timing.c	/^double setStartTime() {$/;"	f
set_D	stdaln.c	297;"	d	file:
set_I	stdaln.c	275;"	d	file:
set_M	stdaln.c	259;"	d	file:
set_end_D	stdaln.c	307;"	d	file:
set_end_I	stdaln.c	285;"	d	file:
skip	BWT.h	/^	int *skip;$/;"	m	struct:HitCombination
skipErrorIndex	BWT.h	/^	int *skipErrorIndex;$/;"	m	struct:HitCombination
skipTableWidth	BWT.h	/^	int skipTableWidth;$/;"	m	struct:HitCombination
start	ModifyAnn.c	/^	unsigned int start;$/;"	m	struct:_CHRANN_TYPE	file:
start1	stdaln.h	/^	int start1, end1; \/* start and end of the first sequence, coordinations are 1-based *\/$/;"	m	struct:__anon6
start2	stdaln.h	/^	int start2, end2; \/* start and end of the second sequence, coordinations are 1-based *\/$/;"	m	struct:__anon6
startSaIndex	BWT.h	/^	unsigned int startSaIndex;			\/\/ starting SA index$/;"	m	struct:SaIndexGroup
startSaIndex	BWT.h	/^	unsigned int startSaIndex;			\/\/ starting SA index$/;"	m	struct:SaIndexGroupNew
startSaIndex	BWT.h	/^	unsigned int startSaIndex;			\/\/ starting SA index$/;"	m	struct:SaIndexGroupOld
startSaIndex	BWT.h	/^	unsigned int startSaIndex;			\/\/ starting SA index$/;"	m	struct:SaIndexGroupProcessed
startSaIndex	BWT.h	/^	unsigned int startSaIndex;			\/\/ starting SA index$/;"	m	struct:SaIndexGroupWithErrorBitVector
startSaIndex	BWT.h	/^	unsigned int startSaIndex;			\/\/ starting SA index$/;"	m	struct:SaIndexGroupWithLengthError
startSaIndex	BWT.h	/^	unsigned int startSaIndex;$/;"	m	struct:SaIndexGroupHash
startSaIndex	BWT.h	/^	unsigned int startSaIndex;$/;"	m	struct:SaIndexRange
strain	extratools.h	/^	int strain;$/;"	m	struct:_HITITEM_TYPE_
swap	MiscUtilities.h	45;"	d
table	extratools.h	/^       HASHCELL * table;$/;"	m	struct:HASHTABLE_TYPE
table	extratools.h	/^       unsigned int * table;$/;"	m	struct:LOOKUPTABLE_TYPE
tableSize	extratools.h	/^       unsigned int tableSize;$/;"	m	struct:HASHTABLE_TYPE
tableSize	extratools.h	/^       unsigned int tableSize;$/;"	m	struct:LOOKUPTABLE_TYPE
text	HSP.h	/^	char text[MAX_SEQ_NAME_LENGTH+1];$/;"	m	struct:Annotation
textLength	BWT.h	/^	unsigned int textLength;			\/\/ length of the text$/;"	m	struct:BWT
textPositionFile	extratools.h	/^FILE * textPositionFile;$/;"	v
textPositionIndex	BWT.h	/^	unsigned int textPositionIndex;			\/\/ storing the pointer to text position$/;"	m	struct:DupSaIndexGroup
textPositionIndex	BWT.h	/^	unsigned int textPositionIndex;		\/\/ storing the pointer to text position$/;"	m	struct:SaIndexGroupProcessed
textPositionIndex	BWT.h	/^	unsigned int textPositionIndex;$/;"	m	struct:SaIndexList
textPositionTime	extratools.c	/^double textPositionTime, textPositionTimeTotal = 0;$/;"	v
textPositionTimeTotal	extratools.c	/^double textPositionTime, textPositionTimeTotal = 0;$/;"	v
tid	Match.c	/^	int tid;$/;"	m	struct:_THREADAUX_TYPE_	file:
tid	soapio.h	/^	int tid;$/;"	m	struct:_ALNSEQ_TYPE_
top	soapio.h	/^	}top;$/;"	m	struct:_ALNSEQ_TYPE_	typeref:struct:_ALNSEQ_TYPE_::__anon3
totalDPCell	BWT.h	/^	LONG* __restrict totalDPCell;$/;"	m	struct:BWTDPStatistics
totalMaxDPCell	BWT.h	/^	int totalMaxDPCell;$/;"	m	struct:BWTDPStatistics
totalMaxDPMemoryInWord	BWT.h	/^	int totalMaxDPMemoryInWord;$/;"	m	struct:BWTDPStatistics
totalMaxDepth	BWT.h	/^	int totalMaxDepth;$/;"	m	struct:BWTDPStatistics
totalNode	BWT.h	/^	LONG* __restrict totalNode;$/;"	m	struct:BWTDPStatistics
traceUnitByteAllocation	MemManager.h	/^	int traceUnitByteAllocation;$/;"	m	struct:MMMaster
truncateLeft	MiscUtilities.h	36;"	d
truncateRight	MiscUtilities.h	35;"	d
un	soapio.h	/^	int id, un, chrNum;$/;"	m	struct:_OUTAUX_TYPE_
unitByteTraceFile	MemManager.h	/^	FILE *unitByteTraceFile;$/;"	m	struct:MMMaster
unmapped	Match.h	/^	int unmapped;$/;"	m	struct:_SOAPOPT_
withAmbiguity	BWT.h	/^	unsigned withAmbiguity	:	1;$/;"	m	struct:DPScanDepth
writeQIndex	extratools.c	/^unsigned int writeQIndex;$/;"	v
x	BWT.h	/^	int h, x, y;$/;"	m	struct:_BWTOPT_TYPE_
y	BWT.h	/^	int h, x, y;$/;"	m	struct:_BWTOPT_TYPE_
zero_qual	Match.h	/^	int zero_qual;$/;"	m	struct:_SOAPOPT_
